generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Location {
  id               String             @id @default(uuid())
  label            String
  imageUrl         String
  tags             String?            @db.Text
  slug             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  hotels           Hotel[]
  activities       Activity[]
  activitiesMaster ActivityMaster[]
  itineraries      Itinerary[]
  itinerariesMaster      ItineraryMaster[]

  tourPackages     TourPackage[]      @relation("LocationTotourPackage")
  tourPackageQuery TourPackageQuery[] @relation("LocationTotourPackageQuery")

  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text  

  @@index([id])
}

model Hotel {
  id           String        @id @default(uuid())
  locationId   String
  name         String
  images       Images[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  location     Location      @relation(fields: [locationId], references: [id])
  itineraries  Itinerary[]   @relation("ItineraryToHotel")
  itinerariesMaster  ItineraryMaster[]   @relation("ItineraryMasterToHotel")

  @@index([locationId])
}

model TourPackageQuery {
  id                        String          @id @default(uuid())
  tourPackageQueryNumber    String?
  tourPackageQueryName      String?
  tourPackageQueryType      String? 
  customerName              String?
  customerNumber            String?
  numDaysNight              String?
  locationId                String
  period                    String?
  tour_highlights           String? @db.Text
  tourStartsFrom            DateTime?
  tourEndsOn                DateTime?
  transport                 String?
  pickup_location           String?
  drop_location             String?
  numAdults                 String?
  numChild5to12             String?
  numChild0to5              String?
  price                     String? @db.Text
  pricePerAdult             String?
  pricePerChildOrExtraBed   String?
  pricePerChild5to12YearsNoBed String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                String? @db.Text
  remarks                   String? @db.Text
  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text  
  disclaimer                String? @db.Text

  isFeatured                Boolean         @default(false)
  isArchived                Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  location                  Location        @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])
  flightDetails             FlightDetails[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]

  images                    Images[]
  assignedTo                 String?
  assignedToMobileNumber     String?
  assignedToEmail            String?

  purchaseDetails           String?  @db.Text
  saleDetails               String?  @db.Text
  paymentDetails            String?  @db.Text
  receiptDetails            String?  @db.Text
  expenseDetails            String?  @db.Text  

  @@index([locationId])
}

model FlightDetails {
  id                 String            @id @default(uuid())
  date               String?
  flightName         String?
  flightNumber       String? 
  from               String?
  to                 String?
  departureTime      String?
  arrivalTime        String?
  flightDuration     String?

  tourPackageId String?
  tourPackage   TourPackage? @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)

  tourPackageQueryId String?
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([tourPackageQueryId])
  @@index([tourPackageId])
}

model TourPackage {
  id                        String      @id @default(uuid())
  tourPackageName           String?
  tourPackageType           String?
  customerName              String?
  customerNumber            String?
  numDaysNight              String?
  locationId                String
  period                    String?
  tour_highlights           String? @db.Text
  transport                 String?
  pickup_location           String?
  drop_location             String?
  numAdults                 String?
  numChild5to12             String?
  numChild0to5              String?
  price                     String?
  pricePerAdult             String?
  pricePerChildOrExtraBed   String?
  pricePerChild5to12YearsNoBed String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                String? @db.Text
  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text
  
  isFeatured                Boolean         @default(false)
  isArchived                Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  location                  Location        @relation("LocationTotourPackage", fields: [locationId], references: [id])
  flightDetails             FlightDetails[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]

  images                    Images[]
  assignedTo                 String?
  assignedToMobileNumber     String?
  assignedToEmail            String?
  slug                       String?
  @@index([locationId])
}

model Activity {
  id           String     @id @default(uuid())
  locationId   String

  location     Location      @relation(fields: [locationId], references: [id])
  
  activityImages      Images[]
  activityTitle       String?     @db.Text
  activityDescription String?     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  itineraryMasterId String?
  itineraryMaster   ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
  @@index([itineraryMasterId])
}

model ActivityMaster {
  id          String     @id @default(uuid())
  locationId   String

  location     Location      @relation(fields: [locationId], references: [id])
  
  activityMasterImages      Images[]
  activityMasterTitle       String?     @db.Text
  activityMasterDescription String?     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
}

model Itinerary {
  id          String            @id @default(uuid())

  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])

  tourPackageId      String?
  tourPackageQueryId String?
  itineraryTitle              String? @db.Text
  itineraryDescription        String? @db.Text
  itineraryImages             Images[]
  dayNumber          Int?
  days               String?
  hotelId            String?
  hotel              Hotel?            @relation("ItineraryToHotel", fields: [hotelId], references: [id])
  numberofRooms      String?
  roomCategory       String?
  mealsIncluded      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities         Activity[]
  activitiesMaster   ActivityMaster[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model ItineraryMaster {
  id          String            @id @default(uuid())

  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])

  tourPackageId      String?
  tourPackageQueryId String?
  itineraryMasterTitle              String? @db.Text
  itineraryMasterDescription        String? @db.Text
  itineraryMasterImages             Images[]
  dayNumber          Int?
  days               String?
  hotelId            String?
  hotel              Hotel?            @relation("ItineraryMasterToHotel", fields: [hotelId], references: [id])
  numberofRooms      String?
  roomCategory       String?
  mealsIncluded      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities         Activity[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model Images {
  id                 String            @id @default(uuid())
  tourPackageId      String?
  tourPackageQueryId String?
  url                String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  hotelId            String?
  hotel              Hotel?            @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  itinerariesId      String?
  itineraries        Itinerary?          @relation(fields: [itinerariesId], references: [id], onDelete: Cascade) 
  
  itinerariesMasterId      String?
  itinerariesMaster        ItineraryMaster?          @relation(fields: [itinerariesMasterId], references: [id], onDelete: Cascade) 
 
  activitiesId       String?
  activities         Activity?          @relation(fields: [activitiesId], references: [id], onDelete: Cascade) 
  
  activitiesMasterId String?
  activitiesMaster   ActivityMaster?    @relation(fields: [activitiesMasterId], references: [id], onDelete: Cascade) 
  
  @@index([hotelId])
  @@index([itinerariesId])
  @@index([itinerariesMasterId])
  @@index([activitiesId])
  @@index([activitiesMasterId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}
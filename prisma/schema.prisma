generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            String        @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[]   @relation("StoreToBillboard")
  locations     Location[]    @relation("StoreToLocation")
  hotels        Hotel[]       @relation("StoreToHotel")
  categories    Category[]    @relation("StoreToCategory")
  products      Product[]     @relation("StoreToProduct")
  sizes         Size[]        @relation("StoreToSize")
  colors        Color[]       @relation("StoreToColor")
  orders        Order[]       @relation("StoreToOrder")
  tourPackages  TourPackage[] @relation("StoreTotourPackage")  // Added relation
  tourPackageQuery  TourPackageQuery[] @relation("StoreTotourPackageQuery")  // Added relation

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Location {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToLocation", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  hotels      Hotel[]  // Add this field to represent the other side of the relation
  tourPackages   TourPackage[]  @relation("LocationTotourPackage")
  tourPackageQuery  TourPackageQuery[]  @relation("LocationTotourPackageQuery")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

// ... other models remain unchanged

model Hotel {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToHotel", fields: [storeId], references: [id])
  locationId  String      // Foreign Key to Location
  location    Location    @relation(fields: [locationId], references: [id])
  tourPackages TourPackage[] @relation("HotelToTourPackage")  // Updated relation name
  tourPackageQuery TourPackageQuery[] @relation("HotelToTourPackageQuery")  // Updated relation name

  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([locationId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model TourPackageQuery {

  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreTotourPackageQuery", fields: [storeId], references: [id])  // Updated relation name
  tourPackageQueryName        String
  customerName  String
  numDaysNight  String

  locationId     String   // Foreign Key to Hotel
  location       Location    @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])  // Updated relation name
 
  period            String
  numAdults         String
  numChild5to12     String
  numChild0to5      String
  price             String

  flightDetails     FlightDetails[] // One-to-many relation to FlightDetails
  hotelDetails      String

  inclusions        String
  exclusions        String
  paymentPolicy     String
  usefulTip        String
  cancellationPolicy String
  airlineCancellationPolicy String
  termsconditions String
  hotelId     String   // Foreign Key to Hotel
  hotel       Hotel    @relation("HotelToTourPackageQuery", fields: [hotelId], references: [id])  // Updated relation name

  itineraries Itinerary[] // Relation to Itinerary Model

  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  images      Image[]  // Updated relation name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([hotelId])
}

model FlightDetails {
  id            String   @id @default(uuid())
  tourPackageQueryId  String?    // Foreign Key to TourPackage
  tourPackageQuery    TourPackageQuery? @relation(fields : [tourPackageQueryId], references: [id], onDelete : Cascade)  // New field for relation to tourPackage
 
  date          String
  from          String
  to            String
  departureTime String
  arrivalTime   String
  
  @@index([tourPackageQueryId])
}

model TourPackage {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreTotourPackage", fields: [storeId], references: [id])  // Updated relation name
  

  locationId     String   // Foreign Key to Hotel
  location       Location    @relation("LocationTotourPackage", fields: [locationId], references: [id])  // Updated relation name
 
  hotelId     String   // Foreign Key to Hotel
  hotel       Hotel    @relation("HotelToTourPackage", fields: [hotelId], references: [id])  // Updated relation name
  name        String
  price       Decimal

  itineraries Itinerary[] // Relation to Itinerary Model

  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  images      Image[]  // Updated relation name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([hotelId])
}

model Itinerary {
  id             String       @id @default(uuid())
  tourPackageId  String?   // Foreign Key to TourPackage
  tourPackage    TourPackage? @relation(fields : [tourPackageId], references: [id], onDelete : Cascade)  // New field for relation to tourPackage
  
  tourPackageQueryId  String?    // Foreign Key to TourPackage
  tourPackageQuery    TourPackageQuery? @relation(fields : [tourPackageQueryId], references: [id], onDelete : Cascade)  // New field for relation to tourPackage
 
  days           String?
  activities     String?
  places         String?
  mealsIncluded  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

 
  @@index([tourPackageId])
  @@index([tourPackageQueryId])

}

model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id           String      @id @default(uuid())
  productId    String?     // Foreign Key to Product (optional)
  product      Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  tourPackageId String?    // Foreign Key to tourPackage (optional)
  tourPackage  TourPackage? @relation(fields : [tourPackageId], references: [id], onDelete : Cascade)  // New field for relation to tourPackage

  tourPackageQueryId String?    // Foreign Key to tourPackage (optional)
  tourPackageQuery  TourPackageQuery? @relation(fields : [tourPackageQueryId], references: [id], onDelete : Cascade)  // New field for relation to tourPackage

  url          String      // URL of the image
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([productId])
  @@index([tourPackageId])  // New index for tourPackageId
  @@index([tourPackageQueryId])  // New index for tourPackageId

}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Location {
  id               String             @id @default(uuid())
  label            String
  imageUrl         String
  tags             String?            @db.Text
  slug             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  hotels           Hotel[]
  activities       Activity[]
  activitiesMaster ActivityMaster[]
  itineraries      Itinerary[]
  itinerariesMaster      ItineraryMaster[]

  tourPackages     TourPackage[]      @relation("LocationTotourPackage")
  tourPackageQuery TourPackageQuery[] @relation("LocationTotourPackageQuery")
  inquiries        Inquiry[]          @relation("LocationToInquiry")

  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text  

  @@index([id])
}

model Hotel {
  id           String        @id @default(uuid())
  locationId   String
  name         String
  link         String? @db.Text       // Added link field
  images       Images[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  location     Location      @relation(fields: [locationId], references: [id])
  itineraries  Itinerary[]   @relation("ItineraryToHotel")
  itinerariesMaster  ItineraryMaster[]   @relation("ItineraryMasterToHotel")

  @@index([locationId])
}

model TourPackageQuery {
  id                        String          @id @default(uuid())
  tourPackageQueryNumber    String?
  tourPackageQueryName      String?
  tourPackageQueryType      String? 
  customerName              String?
  customerNumber            String?
  numDaysNight              String?
  locationId                String
  period                    String?
  tour_highlights           String? @db.Text
  tourStartsFrom            DateTime?
  tourEndsOn                DateTime?
  transport                 String?
  pickup_location           String?
  drop_location             String?
  numAdults                 String?
  numChild5to12             String?
  numChild0to5              String?
  price                     String? @db.Text
  pricePerAdult             String?
  pricePerChildOrExtraBed   String?
  pricePerChild5to12YearsNoBed String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                String? @db.Text
  remarks                   String? @db.Text
  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text  
  disclaimer                String? @db.Text

  isFeatured                Boolean         @default(false)
  isArchived                Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  
  location                  Location        @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])
  flightDetails             FlightDetails[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]
  images                    Images[]
  assignedTo                String?
  assignedToMobileNumber    String?
  assignedToEmail           String?

  purchaseDetails         PurchaseDetail[]
  saleDetails             SaleDetail[]
  paymentDetails          PaymentDetail[]
  receiptDetails          ReceiptDetail[]
  expenseDetails          ExpenseDetail[]
  incomeDetails           IncomeDetail[]

  // Modified: Remove @unique constraint to allow multiple queries per inquiry
  inquiryId                 String?
  inquiry                   Inquiry?       @relation(fields: [inquiryId], references: [id])

  associatePartnerId       String?
  associatePartner        AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)

  @@index([locationId])
  @@index([inquiryId])  // Add index for the new foreign key
  @@index([associatePartnerId])  // Add this index
}

model PurchaseDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  supplierId         String?          // Make supplierId optional
  purchaseDate       DateTime
  price              Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull) // Make relation optional
  
  @@index([supplierId])
  @@index([tourPackageQueryId])
}

model PaymentDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  paymentDate        DateTime
  amount             Float
  method             String?
  transactionId      String?
  note               String?          @db.Text
  supplierId         String?          // Make supplierId optional
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull) // Make relation optional
  
  bankAccountId   String?    
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  cashAccountId   String?
  cashAccount     CashAccount? @relation(fields: [cashAccountId], references: [id])
  
  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([supplierId])
  @@index([tourPackageQueryId])
}

model SaleDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  customerId         String?          // Make customerId optional
  saleDate           DateTime
  salePrice          Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull) // Make relation optional
  
  @@index([customerId])
  @@index([tourPackageQueryId])
}

model ReceiptDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  receiptDate        DateTime
  amount             Float
  reference          String?
  note               String?          @db.Text
  customerId         String?          // Make customerId optional
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull) // Make relation optional
  
   bankAccountId   String?    
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  cashAccountId   String?
  cashAccount     CashAccount? @relation(fields: [cashAccountId], references: [id])
  
  @@index([bankAccountId])
  @@index([cashAccountId])

  @@index([customerId])
  @@index([tourPackageQueryId])
}

model ExpenseDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  expenseDate        DateTime
  amount             Float
  expenseCategory    String
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  bankAccountId   String?    
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  cashAccountId   String?
  cashAccount     CashAccount? @relation(fields: [cashAccountId], references: [id])
  
  @@index([bankAccountId])
  @@index([cashAccountId])
}

model FlightDetails {
  id                 String            @id @default(uuid())
  date               String?
  flightName         String?
  flightNumber       String? 
  from               String?
  to                 String?
  departureTime      String?
  arrivalTime        String?
  flightDuration     String?

  tourPackageId String?
  tourPackage   TourPackage? @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)

  tourPackageQueryId String?
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([tourPackageQueryId])
  @@index([tourPackageId])
}

model TourPackage {
  id                        String      @id @default(uuid())
  tourPackageName           String?
  tourPackageType           String?
  customerName              String?
  customerNumber            String?
  numDaysNight              String?
  locationId                String
  period                    String?
  tour_highlights           String? @db.Text
  transport                 String?
  pickup_location           String?
  drop_location             String?
  numAdults                 String?
  numChild5to12             String?
  numChild0to5              String?
  price                     String?
  pricePerAdult             String?
  pricePerChildOrExtraBed   String?
  pricePerChild5to12YearsNoBed String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                String? @db.Text
  inclusions                String? @db.Text
  exclusions                String? @db.Text
  importantNotes            String? @db.Text
  paymentPolicy             String? @db.Text
  usefulTip                 String? @db.Text
  cancellationPolicy        String? @db.Text
  airlineCancellationPolicy String? @db.Text
  termsconditions           String? @db.Text
  
  isFeatured                Boolean         @default(false)
  isArchived                Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  location                  Location        @relation("LocationTotourPackage", fields: [locationId], references: [id])
  flightDetails             FlightDetails[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]

  images                    Images[]
  assignedTo                 String?
  assignedToMobileNumber     String?
  assignedToEmail            String?
  slug                       String?
  @@index([locationId])
}

model Activity {
  id           String     @id @default(uuid())
  locationId   String

  location     Location      @relation(fields: [locationId], references: [id])
  
  activityImages      Images[]
  activityTitle       String?     @db.Text
  activityDescription String?     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  itineraryMasterId String?
  itineraryMaster   ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
  @@index([itineraryMasterId])
}

model ActivityMaster {
  id          String     @id @default(uuid())
  locationId   String

  location     Location      @relation(fields: [locationId], references: [id])
  
  activityMasterImages      Images[]
  activityMasterTitle       String?     @db.Text
  activityMasterDescription String?     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
}

model Itinerary {
  id          String            @id @default(uuid())

  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])

  tourPackageId      String?
  tourPackageQueryId String?
  itineraryTitle              String? @db.Text
  itineraryDescription        String? @db.Text
  itineraryImages             Images[]
  dayNumber          Int?
  days               String?
  hotelId            String?
  hotel              Hotel?            @relation("ItineraryToHotel", fields: [hotelId], references: [id])
  numberofRooms      String?
  roomCategory       String?
  mealsIncluded      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities         Activity[]
  activitiesMaster   ActivityMaster[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model ItineraryMaster {
  id          String            @id @default(uuid())

  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])

  tourPackageId      String?
  tourPackageQueryId String?
  itineraryMasterTitle              String? @db.Text
  itineraryMasterDescription        String? @db.Text
  itineraryMasterImages             Images[]
  dayNumber          Int?
  days               String?
  hotelId            String?
  hotel              Hotel?            @relation("ItineraryMasterToHotel", fields: [hotelId], references: [id])
  numberofRooms      String?
  roomCategory       String?
  mealsIncluded      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities         Activity[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model Images {
  id                 String            @id @default(uuid())
  tourPackageId      String?
  tourPackageQueryId String?
  url                String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  hotelId            String?
  hotel              Hotel?            @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  itinerariesId      String?
  itineraries        Itinerary?          @relation(fields: [itinerariesId], references: [id], onDelete: Cascade) 
  
  itinerariesMasterId      String?
  itinerariesMaster        ItineraryMaster?          @relation(fields: [itinerariesMasterId], references: [id], onDelete: Cascade) 
 
  activitiesId       String?
  activities         Activity?          @relation(fields: [activitiesId], references: [id], onDelete: Cascade) 
  
  activitiesMasterId String?
  activitiesMaster   ActivityMaster?    @relation(fields: [activitiesMasterId], references: [id], onDelete: Cascade) 
  
  @@index([hotelId])
  @@index([itinerariesId])
  @@index([itinerariesMasterId])
  @@index([activitiesId])
  @@index([activitiesMasterId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model Customer {
  id                  String            @id @default(uuid())
  name                String
  contact             String?
  email               String?
  associatePartnerId  String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  saleDetails         SaleDetail[]
  receiptDetails      ReceiptDetail[]
  associatePartner    AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)

  @@index([associatePartnerId])
}

model Supplier {
  id              String           @id @default(uuid())
  name            String
  contact         String?
  email           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  purchaseDetails PurchaseDetail[]
  paymentDetails  PaymentDetail[]  // Add this line
}

model AssociatePartner {
  id              String    @id @default(uuid())
  name            String
  mobileNumber    String
  email           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  inquiries       Inquiry[]
  customers       Customer[]
  tourPackageQueries    TourPackageQuery[]
}

model Inquiry {
  id                    String           @id @default(uuid())
  customerName          String
  customerMobileNumber  String
  associatePartnerId   String?
  locationId           String
  numAdults            Int              @default(0)
  numChildrenAbove11   Int              @default(0)
  numChildren5to11     Int              @default(0)
  numChildrenBelow5    Int              @default(0)
  remarks              String?          @db.Text
  status              String           @default("pending") // pending, contacted, converted, cancelled
  journeyDate         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())

  location            Location         @relation("LocationToInquiry", fields: [locationId], references: [id])
  associatePartner    AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)
  actions             InquiryAction[]

  // Modified: Change to one-to-many relationship
  tourPackageQueries    TourPackageQuery[]

  @@index([locationId])
  @@index([associatePartnerId])
}

model InquiryAction {
  id          String   @id @default(uuid())
  inquiryId   String
  inquiry     Inquiry  @relation(fields: [inquiryId], references: [id])
  actionType  String   // CALL, MESSAGE, EMAIL, etc.
  remarks     String   
  actionDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([inquiryId])
}

model BankAccount {
  id              String    @id @default(uuid())
  accountName     String
  bankName        String
  accountNumber   String    @unique
  ifscCode        String
  branch          String
  openingBalance  Float     @default(0)
  currentBalance  Float     @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations with transactions
  paymentDetails  PaymentDetail[]
  receiptDetails  ReceiptDetail[]
  expenseDetails  ExpenseDetail[]
  incomeDetails   IncomeDetail[]

  @@index([accountNumber])
}

model CashAccount {
  id              String    @id @default(uuid())
  accountName     String    @unique  // e.g. "Main Cash", "Petty Cash"
  openingBalance  Float     @default(0)
  currentBalance  Float     @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  
  // Relations with transactions
  paymentDetails  PaymentDetail[]
  receiptDetails  ReceiptDetail[]
  expenseDetails  ExpenseDetail[]
  incomeDetails   IncomeDetail[]
}

model IncomeDetail {
  id              String            @id @default(uuid())
  incomeDate      DateTime
  amount          Float
  incomeCategory  String
  description     String?
  
  // Relations
  tourPackageQueryId String?
  tourPackageQuery   TourPackageQuery?   @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  
  // Bank or Cash relation (one of them must be filled)
  bankAccountId   String?
  bankAccount     BankAccount?      @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  cashAccountId   String?
  cashAccount     CashAccount?      @relation(fields: [cashAccountId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}
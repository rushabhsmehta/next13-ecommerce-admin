generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id               String             @id @default(uuid())
  name             String
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  billboards       Billboard[]        @relation("StoreToBillboard")
  locations        Location[]         @relation("StoreToLocation")
  hotels           Hotel[]            @relation("StoreToHotel")
  categories       Category[]         @relation("StoreToCategory")
  products         Product[]          @relation("StoreToProduct")
  sizes            Size[]             @relation("StoreToSize")
  colors           Color[]            @relation("StoreToColor")
  orders           Order[]            @relation("StoreToOrder")
  tourPackages     TourPackage[]      @relation("StoreTotourPackage")
  tourPackageQuery TourPackageQuery[] @relation("StoreTotourPackageQuery")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Location {
  id               String             @id @default(uuid())
  storeId          String
  label            String
  imageUrl         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  store            Store              @relation("StoreToLocation", fields: [storeId], references: [id])
  hotels           Hotel[]
  tourPackages     TourPackage[]      @relation("LocationTotourPackage")
  tourPackageQuery TourPackageQuery[] @relation("LocationTotourPackageQuery")

  @@index([storeId])
}

model Hotel {
  id           String        @id @default(uuid())
  storeId      String
  locationId   String
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  store        Store         @relation("StoreToHotel", fields: [storeId], references: [id])
  location     Location      @relation(fields: [locationId], references: [id])
  tourPackages TourPackage[] @relation("HotelToTourPackage")
  itineraries  Itinerary[]   @relation("ItineraryToHotel")

  @@index([storeId])
  @@index([locationId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  images     Images[]
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model TourPackageQuery {
  id                        String          @id @default(uuid())
  storeId                   String
  tourPackageQueryName      String
  customerName              String
  numDaysNight              String
  locationId                String
  period                    String
  numAdults                 String
  numChild5to12             String
  numChild0to5              String
  price                     String
  inclusions                String @db.Text
  exclusions                String @db.Text
  paymentPolicy             String @db.Text
  usefulTip                 String @db.Text
  cancellationPolicy        String @db.Text
  airlineCancellationPolicy String @db.Text
  termsconditions           String @db.Text
  isFeatured                Boolean         @default(false)
  isArchived                Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  store                     Store           @relation("StoreTotourPackageQuery", fields: [storeId], references: [id])
  location                  Location        @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])
  flightDetails             FlightDetails[]
  itineraries               Itinerary[]
  images                    Images[]
  assignedToPerson           String?
  assignedToMobileNumber     String?
  assignedToEmail          String?
  @@index([storeId])
}

model FlightDetails {
  id                 String            @id @default(uuid())
  date               String?
  flightName         String?
  flightNumber       String? 
  from               String?
  to                 String?
  departureTime      String?
  arrivalTime        String?
  flightDuration     String?
  tourPackageQueryId String?
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([tourPackageQueryId])
}

model TourPackage {
  id          String      @id @default(uuid())
  storeId     String
  locationId  String
  hotelId     String
  name        String
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  store       Store       @relation("StoreTotourPackage", fields: [storeId], references: [id])
  location    Location    @relation("LocationTotourPackage", fields: [locationId], references: [id])
  hotel       Hotel       @relation("HotelToTourPackage", fields: [hotelId], references: [id])
  itineraries Itinerary[]
  images      Images[]

  @@index([storeId])
  @@index([hotelId])
}

model Activity {
  id          String     @id @default(uuid())
  title       String     @db.Text
  description String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  itineraryId String
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([itineraryId])
}

model Itinerary {
  id                 String            @id @default(uuid())
  tourPackageId      String?
  tourPackageQueryId String?
  itineraryTitle              String?
  itineraryDescription        String?
  days               String?
  hotelId            String?
  hotel              Hotel?            @relation("ItineraryToHotel", fields: [hotelId], references: [id])
  mealsIncluded      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities         Activity[]

  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Images {
  id                 String            @id @default(uuid())
  productId          String?
  tourPackageId      String?
  tourPackageQueryId String?
  url                String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  product            Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
}

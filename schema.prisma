generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Location {
  id                        String                   @id @default(uuid())
  label                     String
  imageUrl                  String
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  slug                      String?
  tags                      String?                  @db.Text
  airlineCancellationPolicy Json?
  cancellationPolicy        Json?
  exclusions                Json?
  importantNotes            Json?
  inclusions                Json?
  kitchenGroupPolicy        Json?
  paymentPolicy             Json?
  termsconditions           Json?
  usefulTip                 Json?
  hotels                    Hotel[]
  activities                Activity[]
  activitiesMaster          ActivityMaster[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]
  transportPricings         TransportPricing[]
  tourPackages              TourPackage[]            @relation("LocationTotourPackage")
  tourPackageQuery          TourPackageQuery[]       @relation("LocationTotourPackageQuery")
  inquiries                 Inquiry[]                @relation("LocationToInquiry")
  suppliers                 SupplierLocation[]
  tourDestinations          TourDestination[]
  seasonalPeriods           LocationSeasonalPeriod[]

  @@index([id])
}

model TourDestination {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  imageUrl    String?
  locationId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  hotels      Hotel[]

  @@index([locationId])
  @@index([name])
}

model LocationSeasonalPeriod {
  id                  String               @id @default(uuid())
  locationId          String
  seasonType          String
  name                String
  startMonth          Int
  startDay            Int
  endMonth            Int
  endDay              Int
  description         String?              @db.Text
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  location            Location             @relation(fields: [locationId], references: [id], onDelete: Cascade)
  tourPackagePricings TourPackagePricing[]

  @@index([locationId])
  @@index([seasonType])
  @@index([startMonth, startDay])
  @@index([endMonth, endDay])
  @@index([isActive])
}

model Hotel {
  id                   String                 @id @default(uuid())
  locationId           String
  name                 String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  link                 String?                @db.Text
  destinationId        String?
  images               Images[]
  location             Location               @relation(fields: [locationId], references: [id])
  destination          TourDestination?       @relation(fields: [destinationId], references: [id])
  itineraries          Itinerary[]            @relation("ItineraryToHotel")
  itinerariesMaster    ItineraryMaster[]      @relation("ItineraryMasterToHotel")
  seasonalPricing      HotelPricing[]
  variantHotelMappings VariantHotelMapping[]

  @@index([locationId])
  @@index([destinationId])
}

model MealPlan {
  id                  String               @id @default(uuid())
  name                String
  code                String               @unique
  description         String
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hotelPricings       HotelPricing[]
  roomAllocations     RoomAllocation[]
  itineraries         Itinerary[]
  itinerariesMaster   ItineraryMaster[]
  tourPackagePricings TourPackagePricing[]
}

model RoomType {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  hotelPricings     HotelPricing[]
  roomAllocations   RoomAllocation[]
  itineraries       Itinerary[]
  itinerariesMaster ItineraryMaster[]
}

model OccupancyType {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  maxPersons        Int
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
  rank              Int               @default(0)
  hotelPricings     HotelPricing[]
  roomAllocations   RoomAllocation[]
  itineraries       Itinerary[]
  itinerariesMaster ItineraryMaster[]
}

model VehicleType {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  description          String?
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  transportPricings    TransportPricing[]
  transportDetails     TransportDetail[]
  tourPackagePricings  TourPackagePricing[]
}

model HotelPricing {
  id              String         @id @default(uuid())
  hotelId         String
  startDate       DateTime
  endDate         DateTime
  price           Float
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  mealPlanId      String?
  occupancyTypeId String?
  roomTypeId      String?
  hotel           Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomType        RoomType?      @relation(fields: [roomTypeId], references: [id])
  occupancyType   OccupancyType? @relation(fields: [occupancyTypeId], references: [id])
  mealPlan        MealPlan?      @relation(fields: [mealPlanId], references: [id])

  @@index([hotelId])
  @@index([roomTypeId])
  @@index([occupancyTypeId])
  @@index([mealPlanId])
  @@index([startDate, endDate])
}

model TransportPricing {
  id            String       @id @default(uuid())
  locationId    String
  startDate     DateTime
  endDate       DateTime
  price         Float
  transportType String
  description   String?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  vehicleTypeId String?
  location      Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType? @relation(fields: [vehicleTypeId], references: [id])

  @@index([locationId])
  @@index([vehicleTypeId])
  @@index([startDate, endDate])
}

model TourPackageQuery {
  id                               String            @id @default(uuid())
  tourPackageQueryName             String?
  customerName                     String?
  numDaysNight                     String?
  locationId                       String
  period                           String?
  numAdults                        String?
  numChild5to12                    String?
  numChild0to5                     String?
  price                            String?           @db.Text
  isFeatured                       Boolean           @default(false)
  isArchived                       Boolean           @default(false)
  createdAt                        DateTime          @default(now())
  updatedAt                        DateTime          @updatedAt
  assignedTo                       String?
  assignedToMobileNumber           String?
  assignedToEmail                  String?
  pricePerAdult                    String?
  pricePerChild5to12YearsNoBed     String?
  pricePerChildOrExtraBed          String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                       String?           @db.Text
  transport                        String?
  tourPackageQueryNumber           String?
  customerNumber                   String?
  drop_location                    String?
  pickup_location                  String?
  tourEndsOn                       DateTime?
  tourStartsFrom                   DateTime?
  remarks                          String?           @db.Text
  tourPackageQueryType             String?
  disclaimer                       String?           @db.Text
  inquiryId                        String?
  associatePartnerId               String?
  pricingSection                   Json?
  selectedTemplateId               String?
  selectedTemplateType             String?
  tourPackageTemplateName          String?
  occupancySelections              Json?
  selectedMealPlanId               String?
  airlineCancellationPolicy        Json?
  cancellationPolicy               Json?
  exclusions                       Json?
  importantNotes                   Json?
  inclusions                       Json?
  kitchenGroupPolicy               Json?
  paymentPolicy                    Json?
  termsconditions                  Json?
  usefulTip                        Json?
  tourCategory                     String?           @default("Domestic")
  location                         Location          @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])
  flightDetails                    FlightDetails[]
  itineraries                      Itinerary[]
  itinerariesMaster                ItineraryMaster[]
  images                           Images[]
  purchaseDetails                  PurchaseDetail[]
  saleDetails                      SaleDetail[]
  paymentDetails                   PaymentDetail[]
  receiptDetails                   ReceiptDetail[]
  expenseDetails                   ExpenseDetail[]
  incomeDetails                    IncomeDetail[]
  flightTickets                    FlightTicket[]
  inquiry                          Inquiry?          @relation(fields: [inquiryId], references: [id])
  associatePartner                 AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)

  @@index([locationId])
  @@index([inquiryId])
  @@index([associatePartnerId])
}

model PurchaseDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  supplierId         String?
  purchaseDate       DateTime
  price              Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  billDate           DateTime?
  billNumber         String?
  dueDate            DateTime?
  gstAmount          Float?
  gstPercentage      Float?
  referenceNumber    String?
  stateOfSupply      String?
  status             String?          @default("pending")
  netPayable         Float?
  tdsAmount          Float?
  tdsChallanId       String?
  tdsMasterId        String?
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  items              PurchaseItem[]
  purchaseReturns    PurchaseReturn[]
  tdsMaster          TDSMaster?       @relation(fields: [tdsMasterId], references: [id])
  tdsChallan         TDSChallan?      @relation(fields: [tdsChallanId], references: [id])
  tdsTransactions    TDSTransaction[]

  @@index([supplierId])
  @@index([tourPackageQueryId])
  @@index([tdsMasterId])
  @@index([tdsChallanId])
}

model PurchaseItem {
  id                  String               @id @default(uuid())
  purchaseDetailId    String
  productName         String
  description         String?              @db.Text
  quantity            Float
  unitOfMeasureId     String?
  pricePerUnit        Float
  discountPercent     Float?
  discountAmount      Float?
  taxSlabId           String?
  taxAmount           Float?
  totalAmount         Float
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orderIndex          Int                  @default(0)
  purchaseDetail      PurchaseDetail       @relation(fields: [purchaseDetailId], references: [id], onDelete: Cascade)
  unitOfMeasure       UnitOfMeasure?       @relation(fields: [unitOfMeasureId], references: [id], onDelete: SetNull)
  taxSlab             TaxSlab?             @relation(fields: [taxSlabId], references: [id], onDelete: SetNull)
  purchaseReturnItems PurchaseReturnItem[]

  @@index([purchaseDetailId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
  @@index([purchaseDetailId, orderIndex])
}

model PaymentDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  paymentDate        DateTime
  amount             Float
  method             String?
  transactionId      String?
  note               String?          @db.Text
  supplierId         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bankAccountId      String?
  cashAccountId      String?
  customerId         String?
  paymentType        String?          @default("supplier_payment")
  saleReturnId       String?
  tdsCertificateNo   String?
  tdsDeductedAmount  Float?
  tdsTransactionId   String?          @unique
  images             Images[]
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  saleReturn         SaleReturn?      @relation(fields: [saleReturnId], references: [id], onDelete: SetNull)
  bankAccount        BankAccount?     @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?     @relation(fields: [cashAccountId], references: [id])
  tdsTransaction     TDSTransaction?  @relation(fields: [tdsTransactionId], references: [id], onDelete: SetNull)

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([supplierId])
  @@index([customerId])
  @@index([saleReturnId])
  @@index([tourPackageQueryId])
  @@index([tdsTransactionId])
}

model SaleDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  customerId         String?
  saleDate           DateTime
  salePrice          Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  dueDate            DateTime?
  gstAmount          Float?
  gstPercentage      Float?
  invoiceDate        DateTime?
  invoiceNumber      String?
  stateOfSupply      String?
  status             String?          @default("pending")
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items              SaleItem[]
  saleReturns        SaleReturn[]

  @@index([customerId])
  @@index([tourPackageQueryId])
}

model SaleItem {
  id              String           @id @default(uuid())
  saleDetailId    String
  productName     String
  description     String?          @db.Text
  quantity        Float
  unitOfMeasureId String?
  pricePerUnit    Float
  discountPercent Float?
  discountAmount  Float?
  taxSlabId       String?
  taxAmount       Float?
  totalAmount     Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  orderIndex      Int              @default(0)
  saleDetail      SaleDetail       @relation(fields: [saleDetailId], references: [id], onDelete: Cascade)
  unitOfMeasure   UnitOfMeasure?   @relation(fields: [unitOfMeasureId], references: [id], onDelete: SetNull)
  taxSlab         TaxSlab?         @relation(fields: [taxSlabId], references: [id], onDelete: SetNull)
  saleReturnItems SaleReturnItem[]

  @@index([saleDetailId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
  @@index([saleDetailId, orderIndex])
}

model ReceiptDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  receiptDate        DateTime
  amount             Float
  reference          String?
  note               String?          @db.Text
  customerId         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  bankAccountId      String?
  cashAccountId      String?
  purchaseReturnId   String?
  receiptType        String?          @default("customer_receipt")
  supplierId         String?
  images             Images[]
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  purchaseReturn     PurchaseReturn?  @relation(fields: [purchaseReturnId], references: [id], onDelete: SetNull)
  bankAccount        BankAccount?     @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?     @relation(fields: [cashAccountId], references: [id])

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([customerId])
  @@index([supplierId])
  @@index([purchaseReturnId])
  @@index([tourPackageQueryId])
}

model ExpenseDetail {
  id                 String            @id @default(uuid())
  tourPackageQueryId String?
  expenseDate        DateTime
  amount             Float
  description        String?           @db.Text
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  bankAccountId      String?
  cashAccountId      String?
  expenseCategoryId  String?
  accruedDate        DateTime?
  isAccrued          Boolean           @default(false)
  paidDate           DateTime?
  netPayable         Float?
  tdsAmount          Float?
  tdsChallanId       String?
  tdsMasterId        String?
  expenseCategory    ExpenseCategory?  @relation(fields: [expenseCategoryId], references: [id])
  images             Images[]
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  bankAccount        BankAccount?      @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?      @relation(fields: [cashAccountId], references: [id])
  tdsMaster          TDSMaster?        @relation(fields: [tdsMasterId], references: [id])
  tdsChallan         TDSChallan?       @relation(fields: [tdsChallanId], references: [id])
  tdsTransactions    TDSTransaction[]

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([expenseCategoryId])
  @@index([tourPackageQueryId])
  @@index([isAccrued])
  @@index([tdsMasterId])
  @@index([tdsChallanId])
}

model FlightDetails {
  id                 String            @id @default(uuid())
  date               String?
  flightName         String?
  flightNumber       String?
  from               String?
  to                 String?
  departureTime      String?
  arrivalTime        String?
  flightDuration     String?
  tourPackageQueryId String?
  tourPackageId      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  images             Images[]
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([tourPackageQueryId])
  @@index([tourPackageId])
}

model TourPackage {
  id                               String               @id @default(uuid())
  locationId                       String
  price                            String?
  isFeatured                       Boolean              @default(false)
  isArchived                       Boolean              @default(false)
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  assignedTo                       String?
  assignedToEmail                  String?
  assignedToMobileNumber           String?
  customerName                     String?
  numAdults                        String?
  numChild0to5                     String?
  numChild5to12                    String?
  numDaysNight                     String?
  period                           String?
  tourPackageName                  String?
  pricePerAdult                    String?
  pricePerChild5to12YearsNoBed     String?
  pricePerChildOrExtraBed          String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                       String?              @db.Text
  transport                        String?
  customerNumber                   String?
  drop_location                    String?
  pickup_location                  String?
  slug                             String?
  tourPackageType                  String?
  pricingSection                   Json?
  airlineCancellationPolicy        Json?
  cancellationPolicy               Json?
  exclusions                       Json?
  importantNotes                   Json?
  inclusions                       Json?
  kitchenGroupPolicy               Json?
  paymentPolicy                    Json?
  termsconditions                  Json?
  usefulTip                        Json?
  tourCategory                     String?              @default("Domestic")
  location                         Location             @relation("LocationTotourPackage", fields: [locationId], references: [id])
  flightDetails                    FlightDetails[]
  itineraries                      Itinerary[]
  itinerariesMaster                ItineraryMaster[]
  images                           Images[]
  tourPackagePricings              TourPackagePricing[]
  packageVariants                  PackageVariant[]

  @@index([locationId])
}

model PricingAttribute {
  id                String             @id @default(uuid())
  name              String             @unique
  sortOrder         Int                @default(0)
  isActive          Boolean            @default(true)
  isDefault         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  description       String?            @db.Text
  pricingComponents PricingComponent[]

  @@index([name])
  @@index([isDefault])
}

model PricingComponent {
  id                   String              @id @default(uuid())
  price                Decimal             @db.Decimal(10, 2)
  tourPackagePricingId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  pricingAttributeId   String
  purchasePrice        Decimal?            @db.Decimal(10, 2)
  description          String?             @db.Text
  pricingAttribute     PricingAttribute    @relation(fields: [pricingAttributeId], references: [id])
  tourPackagePricing   TourPackagePricing? @relation(fields: [tourPackagePricingId], references: [id], onDelete: Cascade)

  @@index([pricingAttributeId])
  @@index([tourPackagePricingId])
}

model TourPackagePricing {
  id                       String                  @id @default(uuid())
  tourPackageId            String
  startDate                DateTime
  endDate                  DateTime
  isActive                 Boolean                 @default(true)
  description              String?                 @db.Text
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @default(now())
  mealPlanId               String
  numberOfRooms            Int                     @default(1)
  locationSeasonalPeriodId String?
  isGroupPricing           Boolean                 @default(false)
  vehicleTypeId            String?
  tourPackage              TourPackage             @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  mealPlan                 MealPlan                @relation(fields: [mealPlanId], references: [id])
  locationSeasonalPeriod   LocationSeasonalPeriod? @relation(fields: [locationSeasonalPeriodId], references: [id])
  vehicleType              VehicleType?            @relation(fields: [vehicleTypeId], references: [id])
  pricingComponents        PricingComponent[]

  @@index([tourPackageId])
  @@index([mealPlanId])
  @@index([startDate, endDate])
  @@index([numberOfRooms])
  @@index([locationSeasonalPeriodId])
  @@index([vehicleTypeId])
}

model Activity {
  id                  String           @id @default(uuid())
  locationId          String
  activityTitle       String?          @db.Text
  activityDescription String?          @db.Text
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  itineraryId         String?
  itineraryMasterId   String?
  location            Location         @relation(fields: [locationId], references: [id])
  activityImages      Images[]
  itinerary           Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryMaster     ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
  @@index([itineraryMasterId])
}

model ActivityMaster {
  id                        String     @id @default(uuid())
  locationId                String
  activityMasterTitle       String?    @db.Text
  activityMasterDescription String?    @db.Text
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @default(now())
  itineraryId               String?
  location                  Location   @relation(fields: [locationId], references: [id])
  activityMasterImages      Images[]
  itinerary                 Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
}

model Itinerary {
  id                   String                  @id @default(uuid())
  locationId           String
  tourPackageId        String?
  tourPackageQueryId   String?
  itineraryTitle       String?                 @db.Text
  itineraryDescription String?                 @db.Text
  days                 String?
  hotelId              String?
  mealsIncluded        String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now())
  dayNumber            Int?
  roomCategory         String?
  numberofRooms        String?
  mealPlanId           String?
  occupancyTypeId      String?
  roomTypeId           String?
  location             Location                @relation(fields: [locationId], references: [id])
  itineraryImages      Images[]
  hotel                Hotel?                  @relation("ItineraryToHotel", fields: [hotelId], references: [id])
  roomType             RoomType?               @relation(fields: [roomTypeId], references: [id])
  mealPlan             MealPlan?               @relation(fields: [mealPlanId], references: [id])
  occupancyType        OccupancyType?          @relation(fields: [occupancyTypeId], references: [id])
  transportDetails     TransportDetail[]
  roomAllocations      RoomAllocation[]
  tourPackage          TourPackage?            @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery     TourPackageQuery?       @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities           Activity[]
  activitiesMaster     ActivityMaster[]
  variantHotelMappings VariantHotelMapping[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([roomTypeId])
  @@index([mealPlanId])
  @@index([occupancyTypeId])
}

model ItineraryMaster {
  id                         String            @id @default(uuid())
  locationId                 String
  tourPackageId              String?
  tourPackageQueryId         String?
  itineraryMasterTitle       String?           @db.Text
  itineraryMasterDescription String?           @db.Text
  days                       String?
  hotelId                    String?
  mealsIncluded              String?
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @default(now())
  dayNumber                  Int?
  roomCategory               String?
  numberofRooms              String?
  mealPlanId                 String?
  occupancyTypeId            String?
  roomTypeId                 String?
  location                   Location          @relation(fields: [locationId], references: [id])
  itineraryMasterImages      Images[]
  hotel                      Hotel?            @relation("ItineraryMasterToHotel", fields: [hotelId], references: [id])
  roomType                   RoomType?         @relation(fields: [roomTypeId], references: [id])
  mealPlan                   MealPlan?         @relation(fields: [mealPlanId], references: [id])
  occupancyType              OccupancyType?    @relation(fields: [occupancyTypeId], references: [id])
  transportDetails           TransportDetail[]
  roomAllocations            RoomAllocation[]
  tourPackage                TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery           TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities                 Activity[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([roomTypeId])
  @@index([mealPlanId])
  @@index([occupancyTypeId])
}

model Images {
  id                  String            @id @default(uuid())
  tourPackageId       String?
  tourPackageQueryId  String?
  url                 String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  hotelId             String?
  itinerariesId       String?
  activitiesId        String?
  activitiesMasterId  String?
  itinerariesMasterId String?
  paymentDetailsId    String?
  receiptDetailsId    String?
  expenseDetailsId    String?
  incomeDetailsId     String?
  flightDetailsId     String?
  tourPackage         TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery    TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  hotel               Hotel?            @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  itineraries         Itinerary?        @relation(fields: [itinerariesId], references: [id], onDelete: Cascade)
  itinerariesMaster   ItineraryMaster?  @relation(fields: [itinerariesMasterId], references: [id], onDelete: Cascade)
  activities          Activity?         @relation(fields: [activitiesId], references: [id], onDelete: Cascade)
  activitiesMaster    ActivityMaster?   @relation(fields: [activitiesMasterId], references: [id], onDelete: Cascade)
  paymentDetails      PaymentDetail?    @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  receiptDetails      ReceiptDetail?    @relation(fields: [receiptDetailsId], references: [id], onDelete: Cascade)
  incomeDetails       IncomeDetail?     @relation(fields: [incomeDetailsId], references: [id], onDelete: Cascade)
  expenseDetails      ExpenseDetail?    @relation(fields: [expenseDetailsId], references: [id], onDelete: Cascade)
  flightDetails       FlightDetails?    @relation(fields: [flightDetailsId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([itinerariesId])
  @@index([itinerariesMasterId])
  @@index([activitiesId])
  @@index([activitiesMasterId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([paymentDetailsId])
  @@index([receiptDetailsId])
  @@index([incomeDetailsId])
  @@index([expenseDetailsId])
  @@index([flightDetailsId])
}

model Customer {
  id                    String                      @id @default(uuid())
  name                  String
  contact               String?
  email                 String?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @default(now())
  associatePartnerId    String?
  birthdate             DateTime?                   @db.Date
  marriageAnniversary   DateTime?                   @db.Date
  isTdsDeductor         Boolean                     @default(false)
  tanNumber             String?
  
  // Marketing Preferences
  marketingOptIn        Boolean                     @default(true)
  marketingOptInAt      DateTime?
  marketingOptOutAt     DateTime?
  
  // Relations
  saleDetails           SaleDetail[]
  receiptDetails        ReceiptDetail[]
  refundPayments        PaymentDetail[]
  associatePartner      AssociatePartner?           @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)
  tdsTransactions       TDSTransaction[]
  
  // WhatsApp Campaign Relations
  campaignRecipients    WhatsAppCampaignRecipient[]
  whatsappCarts         WhatsAppCart[]
  whatsappOrders        WhatsAppOrder[]

  @@index([associatePartnerId])
}

model Supplier {
  id              String             @id @default(uuid())
  name            String
  contact         String?
  email           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  defaultTdsId    String?
  lowerTdsCertNo  String?
  lowerTdsRate    Float?
  lowerValidFrom  DateTime?
  lowerValidTo    DateTime?
  msmeStatus      String?
  panNumber       String?
  tdsApplicable   Boolean            @default(false)
  locations       SupplierLocation[]
  purchaseDetails PurchaseDetail[]
  paymentDetails  PaymentDetail[]
  refundReceipts  ReceiptDetail[]
  defaultTds      TDSMaster?         @relation(fields: [defaultTdsId], references: [id])
  tdsTransactions TDSTransaction[]

  @@index([defaultTdsId])
}

model SupplierLocation {
  id         String   @id @default(uuid())
  supplierId String
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([supplierId, locationId])
  @@index([supplierId])
  @@index([locationId])
}

model AssociatePartner {
  id                 String             @id @default(uuid())
  name               String
  mobileNumber       String
  email              String?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now())
  gmail              String?
  inquiries          Inquiry[]
  customers          Customer[]
  tourPackageQueries TourPackageQuery[]
}

model OperationalStaff {
  id                String               @id @default(uuid())
  name              String
  email             String               @unique
  password          String
  role              OperationalStaffRole @default(OPERATIONS)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @default(now())
  assignedInquiries Inquiry[]            @relation("AssignedOperationalStaffToInquiry")

  @@index([email])
}

model Inquiry {
  id                   String             @id @default(uuid())
  customerName         String
  customerMobileNumber String
  associatePartnerId   String?
  locationId           String
  numAdults            Int                @default(0)
  numChildrenAbove11   Int                @default(0)
  numChildren5to11     Int                @default(0)
  numChildrenBelow5    Int                @default(0)
  remarks              String?            @db.Text
  status               String             @default("pending")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  journeyDate          DateTime?          @db.Date
  assignedStaffAt      DateTime?
  assignedToStaffId    String?
  nextFollowUpDate     DateTime?          @db.Date
  location             Location           @relation("LocationToInquiry", fields: [locationId], references: [id])
  associatePartner     AssociatePartner?  @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)
  actions              InquiryAction[]
  tourPackageQueries   TourPackageQuery[]
  assignedStaff        OperationalStaff?  @relation("AssignedOperationalStaffToInquiry", fields: [assignedToStaffId], references: [id])
  roomAllocations      RoomAllocation[]
  transportDetails     TransportDetail[]

  @@index([locationId])
  @@index([associatePartnerId])
  @@index([assignedToStaffId])
}

model InquiryAction {
  id         String   @id @default(uuid())
  inquiryId  String
  actionType String
  remarks    String
  actionDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  inquiry    Inquiry  @relation(fields: [inquiryId], references: [id])

  @@index([inquiryId])
}

model BankAccount {
  id                String          @id @default(uuid())
  accountName       String
  bankName          String
  accountNumber     String          @unique
  ifscCode          String
  branch            String
  openingBalance    Float           @default(0)
  currentBalance    Float           @default(0)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  paymentDetails    PaymentDetail[]
  receiptDetails    ReceiptDetail[]
  expenseDetails    ExpenseDetail[]
  incomeDetails     IncomeDetail[]
  outgoingTransfers Transfer[]      @relation("FromBankAccount")
  incomingTransfers Transfer[]      @relation("ToBankAccount")

  @@index([accountNumber])
}

model CashAccount {
  id                String          @id @default(uuid())
  accountName       String          @unique
  openingBalance    Float           @default(0)
  currentBalance    Float           @default(0)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  paymentDetails    PaymentDetail[]
  receiptDetails    ReceiptDetail[]
  expenseDetails    ExpenseDetail[]
  incomeDetails     IncomeDetail[]
  outgoingTransfers Transfer[]      @relation("FromCashAccount")
  incomingTransfers Transfer[]      @relation("ToCashAccount")
}

model IncomeDetail {
  id                 String            @id @default(uuid())
  incomeDate         DateTime
  amount             Float
  description        String?
  tourPackageQueryId String?
  bankAccountId      String?
  cashAccountId      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  incomeCategoryId   String?
  incomeCategory     IncomeCategory?   @relation(fields: [incomeCategoryId], references: [id])
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  bankAccount        BankAccount?      @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  cashAccount        CashAccount?      @relation(fields: [cashAccountId], references: [id], onDelete: Cascade)
  images             Images[]

  @@index([incomeCategoryId])
  @@index([tourPackageQueryId])
  @@index([bankAccountId])
  @@index([cashAccountId])
}

model IncomeCategory {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  incomes     IncomeDetail[]
}

model ExpenseCategory {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  expenses    ExpenseDetail[]
}

model Transfer {
  id                String       @id @default(uuid())
  amount            Float
  transferDate      DateTime
  reference         String?
  description       String?
  fromBankAccountId String?
  fromCashAccountId String?
  toBankAccountId   String?
  toCashAccountId   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  fromBankAccount   BankAccount? @relation("FromBankAccount", fields: [fromBankAccountId], references: [id])
  fromCashAccount   CashAccount? @relation("FromCashAccount", fields: [fromCashAccountId], references: [id])
  toBankAccount     BankAccount? @relation("ToBankAccount", fields: [toBankAccountId], references: [id])
  toCashAccount     CashAccount? @relation("ToCashAccount", fields: [toCashAccountId], references: [id])

  @@index([fromBankAccountId])
  @@index([fromCashAccountId])
  @@index([toBankAccountId])
  @@index([toCashAccountId])
}

model Organization {
  id                String               @id @default(uuid())
  name              String
  address           String?              @db.Text
  city              String?
  state             String?
  pincode           String?
  country           String?
  phone             String?
  email             String?
  website           String?
  gstNumber         String?
  panNumber         String?
  logoUrl           String?
  defaultCurrency   String?              @default("₹")
  defaultTaxSlab    String?
  invoicePrefix     String?              @default("INV-")
  nextInvoiceNumber Int                  @default(1)
  billPrefix        String?              @default("BILL-")
  nextBillNumber    Int                  @default(1)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  tanNumber         String?
  tdsDeductorType   String?
  tdsSignatoryName  String?
  tdsSignatoryTitle String?
  members           OrganizationMember[]
}

model OrganizationMember {
  id             String           @id @default(uuid())
  organizationId String
  userId         String
  email          String?
  role           OrganizationRole @default(VIEWER)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([role])
}

model UnitOfMeasure {
  id                  String               @id @default(uuid())
  name                String               @unique
  abbreviation        String
  description         String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]
  purchaseReturnItems PurchaseReturnItem[]
  saleReturnItems     SaleReturnItem[]
}

model TaxSlab {
  id                  String               @id @default(uuid())
  name                String               @unique
  percentage          Float
  description         String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]
  purchaseReturnItems PurchaseReturnItem[]
  saleReturnItems     SaleReturnItem[]
}

model PurchaseReturn {
  id               String               @id @default(uuid())
  purchaseDetailId String
  returnDate       DateTime
  returnReason     String?              @db.Text
  amount           Float
  gstAmount        Float?
  reference        String?
  status           String               @default("pending")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now())
  purchaseDetail   PurchaseDetail       @relation(fields: [purchaseDetailId], references: [id])
  items            PurchaseReturnItem[]
  receipts         ReceiptDetail[]

  @@index([purchaseDetailId])
}

model PurchaseReturnItem {
  id               String         @id @default(uuid())
  purchaseReturnId String
  purchaseItemId   String?
  productName      String
  description      String?        @db.Text
  quantity         Float
  unitOfMeasureId  String?
  pricePerUnit     Float
  taxAmount        Float?
  taxSlabId        String?
  totalAmount      Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  orderIndex       Int            @default(0)
  purchaseReturn   PurchaseReturn @relation(fields: [purchaseReturnId], references: [id], onDelete: Cascade)
  purchaseItem     PurchaseItem?  @relation(fields: [purchaseItemId], references: [id])
  unitOfMeasure    UnitOfMeasure? @relation(fields: [unitOfMeasureId], references: [id])
  taxSlab          TaxSlab?       @relation(fields: [taxSlabId], references: [id])

  @@index([purchaseReturnId])
  @@index([purchaseItemId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
  @@index([purchaseReturnId, orderIndex])
}

model SaleReturn {
  id           String           @id @default(uuid())
  saleDetailId String
  returnDate   DateTime
  returnReason String?          @db.Text
  amount       Float
  gstAmount    Float?
  reference    String?
  status       String           @default("pending")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  saleDetail   SaleDetail       @relation(fields: [saleDetailId], references: [id])
  items        SaleReturnItem[]
  payments     PaymentDetail[]

  @@index([saleDetailId])
}

model SaleReturnItem {
  id              String         @id @default(uuid())
  saleReturnId    String
  saleItemId      String?
  productName     String
  description     String?        @db.Text
  quantity        Float
  unitOfMeasureId String?
  pricePerUnit    Float
  taxAmount       Float?
  taxSlabId       String?
  totalAmount     Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  orderIndex      Int            @default(0)
  saleReturn      SaleReturn     @relation(fields: [saleReturnId], references: [id], onDelete: Cascade)
  saleItem        SaleItem?      @relation(fields: [saleItemId], references: [id])
  unitOfMeasure   UnitOfMeasure? @relation(fields: [unitOfMeasureId], references: [id])
  taxSlab         TaxSlab?       @relation(fields: [taxSlabId], references: [id])

  @@index([saleReturnId])
  @@index([saleItemId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
  @@index([saleReturnId, orderIndex])
}

model FlightTicket {
  id                 String            @id @default(uuid())
  pnr                String            @unique
  airline            String
  flightNumber       String
  departureAirport   String
  arrivalAirport     String
  departureTime      DateTime
  arrivalTime        DateTime
  ticketClass        String
  issueDate          DateTime          @default(now())
  status             String            @default("confirmed")
  baggageAllowance   String?
  bookingReference   String?
  fareAmount         Float?
  taxAmount          Float?
  totalAmount        Float?
  tourPackageQueryId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: SetNull)
  passengers         Passenger[]

  @@index([tourPackageQueryId])
}

model Passenger {
  id             String       @id @default(uuid())
  name           String
  type           String       @default("Adult")
  seatNumber     String?
  age            Int?
  gender         String?
  flightTicketId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  flightTicket   FlightTicket @relation(fields: [flightTicketId], references: [id], onDelete: Cascade)

  @@index([flightTicketId])
}

model TransportDetail {
  id                      String           @id @default(uuid())
  itineraryId             String?
  quantity                Int              @default(1)
  capacity                Int?
  description             String?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @default(now())
  dropLocation            String?
  inquiryId               String?
  isAirportDropRequired   Boolean?         @default(false)
  isAirportPickupRequired Boolean?         @default(false)
  itineraryMasterId       String?
  notes                   String?          @db.Text
  pickupLocation          String?
  requirementDate         DateTime?
  vehicleTypeId           String
  itinerary               Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  inquiry                 Inquiry?         @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  itineraryMaster         ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)
  vehicleType             VehicleType      @relation(fields: [vehicleTypeId], references: [id])

  @@index([itineraryId])
  @@index([inquiryId])
  @@index([itineraryMasterId])
  @@index([vehicleTypeId])
}

model RoomAllocation {
  id                String           @id @default(uuid())
  itineraryId       String?
  quantity          Int              @default(1)
  guestNames        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  inquiryId         String?
  itineraryMasterId String?
  mealPlanId        String?
  notes             String?          @db.Text
  occupancyTypeId   String
  roomTypeId        String
  customRoomType    String?
  voucherNumber     String?
  itinerary         Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  inquiry           Inquiry?         @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  itineraryMaster   ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)
  roomType          RoomType         @relation(fields: [roomTypeId], references: [id])
  occupancyType     OccupancyType    @relation(fields: [occupancyTypeId], references: [id])
  mealPlan          MealPlan?        @relation(fields: [mealPlanId], references: [id])

  @@index([itineraryId])
  @@index([inquiryId])
  @@index([roomTypeId])
  @@index([occupancyTypeId])
  @@index([mealPlanId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model WhatsAppMessage {
  id           String                  @id @default(uuid())
  message      String?                 @db.Text
  status       String                  @default("pending")
  direction    String                  @default("outbound")
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now())
  messageSid   String?
  deliveredAt  DateTime?
  errorCode    String?
  errorMessage String?                 @db.Text
  from         String?
  sentAt       DateTime?
  to           String?
  waId         String?
  sessionId    String?
  metadata     Json?
  payload      Json?
  scheduledAt  DateTime?
  automationId String?
  session      WhatsAppSession?        @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  automation   WhatsAppAutomation?     @relation(fields: [automationId], references: [id], onDelete: SetNull)
  analytics    WhatsAppAnalyticsEvent[]

  @@index([to])
  @@index([status])
  @@index([direction])
  @@index([createdAt])
  @@index([sessionId])
  @@index([automationId])
  @@index([scheduledAt])
}

model WhatsAppSession {
  id               String                   @id @default(uuid())
  phoneNumber      String?
  waId             String?
  flowToken        String?
  context          Json?
  lastScreen       String?
  lastAction       String?
  lastMessageId    String?
  lastInteraction  DateTime                 @default(now())
  expiresAt        DateTime?
  isArchived       Boolean                  @default(false)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  messages         WhatsAppMessage[]
  analytics        WhatsAppAnalyticsEvent[]

  @@unique([flowToken])
  @@index([waId])
  @@index([phoneNumber])
  @@index([lastInteraction])
  @@index([isArchived])
}

model WhatsAppAutomation {
  id          String                   @id @default(uuid())
  name        String
  description String?                  @db.Text
  triggerType String
  triggerConfig Json?
  actionType  String
  actionConfig Json?
  isActive    Boolean                  @default(true)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  messages    WhatsAppMessage[]
  analytics   WhatsAppAnalyticsEvent[]

  @@index([triggerType])
  @@index([actionType])
  @@index([isActive])
}

model WhatsAppAnalyticsEvent {
  id           String               @id @default(uuid())
  sessionId    String?
  messageId    String?
  automationId String?
  eventType    String
  payload      Json?
  observedAt   DateTime             @default(now())
  createdAt    DateTime             @default(now())
  session      WhatsAppSession?     @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  message      WhatsAppMessage?     @relation(fields: [messageId], references: [id], onDelete: SetNull)
  automation   WhatsAppAutomation?  @relation(fields: [automationId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([messageId])
  @@index([automationId])
  @@index([eventType])
  @@index([observedAt])
}

model WhatsAppTemplate {
  id        String   @id @default(uuid())
  name      String   @unique
  body      String   @db.Text
  variables Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model AuditLog {
  id         String   @id @default(uuid())
  entityId   String
  entityType String
  action     String
  userId     String
  userEmail  String
  userName   String
  userRole   String
  before     Json?
  after      Json?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([entityId])
  @@index([entityType])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model TDSMaster {
  id                  String           @id @default(uuid())
  sectionCode         String
  description         String?
  thresholdAmount     Float?
  rateIndividual      Float?
  rateCompany         Float?
  rateWithPan         Float?
  rateWithoutPan      Float?
  effectiveFrom       DateTime
  effectiveTo         DateTime?
  isIncomeTaxTds      Boolean          @default(true)
  isGstTds            Boolean          @default(false)
  surchargeApplicable Boolean          @default(false)
  cessApplicable      Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  supplierDefaults    Supplier[]
  purchaseDetails     PurchaseDetail[]
  expenseDetails      ExpenseDetail[]
  tdsTransactions     TDSTransaction[]

  @@index([sectionCode])
  @@index([isIncomeTaxTds, isGstTds])
  @@index([effectiveFrom])
}

model TDSChallan {
  id              String           @id @default(uuid())
  bsrCode         String?
  challanSerialNo String?
  depositDate     DateTime?
  paymentMode     String?
  bankName        String?
  amount          Float?
  notes           String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  updatedBy       String?
  deletedAt       DateTime?
  purchaseDetails PurchaseDetail[]
  expenseDetails  ExpenseDetail[]
  tdsTransactions TDSTransaction[]

  @@index([bsrCode])
  @@index([depositDate])
  @@index([deletedAt])
}

model TDSTransaction {
  id                String          @id @default(uuid())
  tdsType           String          @default("INCOME_TAX")
  sectionId         String?
  baseAmount        Float
  appliedRate       Float
  tdsAmount         Float
  financialYear     String?
  quarter           String?
  status            String          @default("pending")
  certificateNumber String?
  pan               String?
  tan               String?
  notes             String?         @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  challanId         String?
  supplierId        String?
  customerId        String?
  organizationId    String?
  purchaseDetailId  String?
  paymentDetailId   String?
  expenseDetailId   String?
  section           TDSMaster?      @relation(fields: [sectionId], references: [id])
  challan           TDSChallan?     @relation(fields: [challanId], references: [id])
  supplier          Supplier?       @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  customer          Customer?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  purchaseDetail    PurchaseDetail? @relation(fields: [purchaseDetailId], references: [id], onDelete: SetNull)
  paymentDetail     PaymentDetail?
  expenseDetail     ExpenseDetail?  @relation(fields: [expenseDetailId], references: [id], onDelete: SetNull)

  @@index([sectionId])
  @@index([supplierId])
  @@index([customerId])
  @@index([purchaseDetailId])
  @@index([paymentDetailId])
  @@index([expenseDetailId])
  @@index([challanId])
  @@index([status])
}

model TDSReturn {
  id               String    @id @default(uuid())
  returnType       String
  financialYear    String
  quarter          String
  acknowledgmentNo String?
  filedDate        DateTime?
  isRevised        Boolean   @default(false)
  revisionNumber   Int?      @default(0)
  notes            String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
}

model PackageVariant {
  id                   String                  @id @default(uuid())
  name                 String                  // "Luxury", "Premium", "Standard"
  description          String?                 @db.Text
  tourPackageId        String?
  isDefault            Boolean                 @default(false)
  sortOrder            Int                     @default(0)
  priceModifier        Float?                  // % increase/decrease from base
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  tourPackage          TourPackage?            @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  variantHotelMappings VariantHotelMapping[]

  @@index([tourPackageId])
  @@index([sortOrder])
}

model VariantHotelMapping {
  id               String         @id @default(uuid())
  packageVariantId String
  itineraryId      String
  hotelId          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  packageVariant   PackageVariant @relation(fields: [packageVariantId], references: [id], onDelete: Cascade)
  itinerary        Itinerary      @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  hotel            Hotel          @relation(fields: [hotelId], references: [id])

  @@unique([packageVariantId, itineraryId])
  @@index([packageVariantId])
  @@index([itineraryId])
  @@index([hotelId])
}

// ============================================================================
// WhatsApp Campaigns & Catalog Models
// ============================================================================

model WhatsAppCampaign {
  id               String                      @id @default(uuid())
  name             String
  description      String?                     @db.Text
  
  // Template Configuration
  templateName     String
  templateLanguage String                      @default("en_US")
  templateVariables Json?                      // Dynamic variables for template
  
  // Targeting
  targetType       String                      // "all", "segment", "manual", "imported"
  segmentQuery     Json?                       // Saved query for dynamic segments
  
  // Scheduling
  status           String                      @default("draft") // draft, scheduled, sending, paused, completed, cancelled, failed
  scheduledFor     DateTime?
  startedAt        DateTime?
  completedAt      DateTime?
  
  // Settings
  sendWindowStart  Int?                        // Hour to start sending (0-23)
  sendWindowEnd    Int?                        // Hour to stop sending (0-23)
  rateLimit        Int                         @default(10) // Messages per minute
  retryFailed      Boolean                     @default(true)
  maxRetries       Int                         @default(3)
  
  // Stats (cached for performance)
  totalRecipients  Int                         @default(0)
  sentCount        Int                         @default(0)
  deliveredCount   Int                         @default(0)
  readCount        Int                         @default(0)
  failedCount      Int                         @default(0)
  respondedCount   Int                         @default(0)
  
  // Metadata
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  createdBy        String?                     // User ID who created it
  organizationId   String?
  tags             Json?                       // For categorization (array of strings)
  
  // Relations
  recipients       WhatsAppCampaignRecipient[]
  
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
  @@index([organizationId])
  @@index([createdBy])
}

model WhatsAppCampaignRecipient {
  id               String            @id @default(uuid())
  campaignId       String
  
  // Recipient Info
  phoneNumber      String            // E.164 format
  customerId       String?           // Link to Customer model
  name             String?
  
  // Template Variables (personalization)
  variables        Json?             // {"name": "John", "package": "Bali Premium"}
  
  // Sending Status
  status           String            @default("pending") // pending, sending, sent, delivered, read, failed, responded, opted_out
  sentAt           DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  failedAt         DateTime?
  
  // Error Handling
  errorCode        String?
  errorMessage     String?           @db.Text
  retryCount       Int               @default(0)
  lastRetryAt      DateTime?
  
  // Response Tracking
  respondedAt      DateTime?
  responseMessage  String?           @db.Text
  
  // Message Reference
  messageId        String?           // WhatsApp message ID (wamid)
  messageSid       String?           // Our internal message ID
  
  // Metadata
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  campaign         WhatsAppCampaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer         Customer?         @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  @@index([campaignId])
  @@index([status])
  @@index([customerId])
  @@index([phoneNumber])
  @@index([sentAt])
}

model WhatsAppCatalog {
  id                  String                @id @default(uuid())
  
  // Meta Integration
  metaCatalogId       String?               @unique // Meta Commerce Manager catalog ID
  
  // Basic Info
  name                String
  description         String?               @db.Text
  currency            String                @default("INR")
  
  // Settings
  isActive            Boolean               @default(true)
  isPublic            Boolean               @default(false)
  autoSync            Boolean               @default(false) // Auto-sync with Meta Commerce Manager
  lastSyncAt          DateTime?
  
  // Configuration
  businessCategoryId  String?               // E.g., "Travel", "Tours"
  defaultImageUrl     String?
  
  // Stats
  totalProducts       Int                   @default(0)
  activeProducts      Int                   @default(0)
  totalOrders         Int                   @default(0)
  totalRevenue        Decimal               @default(0) @db.Decimal(10, 2)
  
  // Metadata
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  organizationId      String?
  
  // Relations
  products            WhatsAppProduct[]
  
  @@index([metaCatalogId])
  @@index([organizationId])
  @@index([isActive])
}

model WhatsAppProduct {
  id                String                      @id @default(uuid())
  catalogId         String
  
  // Meta Integration
  metaProductId     String?                     @unique // Meta product ID (retailer_id)
  
  // Basic Info
  sku               String                      @unique
  name              String
  description       String?                     @db.Text
  
  // Pricing
  price             Decimal                     @db.Decimal(10, 2)
  salePrice         Decimal?                    @db.Decimal(10, 2)
  currency          String                      @default("INR")
  
  // Inventory
  availability      String                      @default("in_stock") // in_stock, out_of_stock, preorder
  quantity          Int?
  
  // Media
  imageUrl          String?
  imageUrls         Json?                       // Multiple images as JSON array
  videoUrl          String?
  
  // Organization
  category          String?
  brand             String?
  condition         String                      @default("new") // new, refurbished
  
  // Variants (for tour packages)
  hasVariants       Boolean                     @default(false)
  variantOptions    Json?                       // e.g., {"duration": ["3 days", "5 days"], "accommodation": ["Standard", "Premium"]}
  
  // SEO & Discovery
  tags              Json?                       // Tags as JSON array
  url               String?                     // Product page URL
  
  // Status
  isActive          Boolean                     @default(true)
  isVisible         Boolean                     @default(true)
  
  // Stats
  viewCount         Int                         @default(0)
  shareCount        Int                         @default(0)
  cartAddCount      Int                         @default(0)
  purchaseCount     Int                         @default(0)
  
  // Metadata
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  lastSyncAt        DateTime?
  
  // Relations
  catalog           WhatsAppCatalog             @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  variants          WhatsAppProductVariant[]
  cartItems         WhatsAppCartItem[]
  orderItems        WhatsAppOrderItem[]
  
  @@index([catalogId])
  @@index([metaProductId])
  @@index([sku])
  @@index([isActive, isVisible])
  @@index([category])
}

model WhatsAppProductVariant {
  id                String                @id @default(uuid())
  productId         String
  
  // Variant Info
  sku               String                @unique
  name              String                // "Bali 5 Days Premium Package"
  options           Json                  // {"duration": "5 days", "accommodation": "Premium"}
  
  // Pricing
  price             Decimal               @db.Decimal(10, 2)
  salePrice         Decimal?              @db.Decimal(10, 2)
  
  // Inventory
  availability      String                @default("in_stock")
  quantity          Int?
  
  // Media
  imageUrl          String?
  
  // Status
  isActive          Boolean               @default(true)
  
  // Stats
  purchaseCount     Int                   @default(0)
  
  // Metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relations
  product           WhatsAppProduct       @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems         WhatsAppCartItem[]
  orderItems        WhatsAppOrderItem[]
  
  @@index([productId])
  @@index([sku])
}

model WhatsAppCart {
  id                String              @id @default(uuid())
  
  // Customer Info
  phoneNumber       String
  customerId        String?
  sessionId         String?             // WhatsAppSession ID
  
  // Status
  status            String              @default("active") // active, checkout, converted, abandoned
  
  // Totals
  subtotal          Decimal             @default(0) @db.Decimal(10, 2)
  tax               Decimal             @default(0) @db.Decimal(10, 2)
  discount          Decimal             @default(0) @db.Decimal(10, 2)
  total             Decimal             @default(0) @db.Decimal(10, 2)
  currency          String              @default("INR")
  
  // Checkout
  checkoutAt        DateTime?
  abandonedAt       DateTime?
  convertedAt       DateTime?
  
  // Metadata
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime?           // Auto-expire after X days
  
  // Relations
  customer          Customer?           @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items             WhatsAppCartItem[]
  order             WhatsAppOrder?
  
  @@index([phoneNumber])
  @@index([status])
  @@index([customerId])
  @@index([createdAt])
}

model WhatsAppCartItem {
  id                String                    @id @default(uuid())
  cartId            String
  
  // Product Info
  productId         String
  variantId         String?
  
  // Quantity & Pricing
  quantity          Int                       @default(1)
  unitPrice         Decimal                   @db.Decimal(10, 2)
  totalPrice        Decimal                   @db.Decimal(10, 2)
  
  // Customization
  notes             String?                   @db.Text
  customFields      Json?
  
  // Metadata
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  // Relations
  cart              WhatsAppCart              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product           WhatsAppProduct           @relation(fields: [productId], references: [id])
  variant           WhatsAppProductVariant?   @relation(fields: [variantId], references: [id])
  
  @@index([cartId])
  @@index([productId])
}

model WhatsAppOrder {
  id                String              @id @default(uuid())
  orderNumber       String              @unique // "ORD-2025-001234"
  
  // Customer Info
  cartId            String              @unique
  phoneNumber       String
  customerId        String?
  
  // Contact Info
  customerName      String
  customerEmail     String?
  
  // Order Details
  status            String              @default("pending") // pending, confirmed, processing, completed, cancelled, refunded
  
  // Pricing
  subtotal          Decimal             @db.Decimal(10, 2)
  tax               Decimal             @db.Decimal(10, 2)
  discount          Decimal             @db.Decimal(10, 2)
  shippingFee       Decimal             @default(0) @db.Decimal(10, 2)
  total             Decimal             @db.Decimal(10, 2)
  currency          String              @default("INR")
  
  // Payment
  paymentStatus     String              @default("unpaid") // unpaid, partial, paid, refunded
  paymentMethod     String?             // "whatsapp_pay", "razorpay", "bank_transfer"
  paidAmount        Decimal             @default(0) @db.Decimal(10, 2)
  
  // Fulfillment
  fulfillmentStatus String              @default("unfulfilled") // unfulfilled, partially_fulfilled, fulfilled
  shippingAddress   Json?
  billingAddress    Json?
  
  // Tracking
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  
  // Notes
  customerNotes     String?             @db.Text
  internalNotes     String?             @db.Text
  
  // Metadata
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  confirmedAt       DateTime?
  cancelledAt       DateTime?
  
  // Relations
  cart              WhatsAppCart        @relation(fields: [cartId], references: [id])
  customer          Customer?           @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items             WhatsAppOrderItem[]
  
  @@index([orderNumber])
  @@index([status])
  @@index([customerId])
  @@index([phoneNumber])
  @@index([createdAt])
}

model WhatsAppOrderItem {
  id                String                    @id @default(uuid())
  orderId           String
  
  // Product Info
  productId         String
  variantId         String?
  
  // Snapshot (preserve data even if product deleted)
  productName       String
  productSku        String
  productImage      String?
  variantOptions    Json?
  
  // Quantity & Pricing
  quantity          Int
  unitPrice         Decimal                   @db.Decimal(10, 2)
  totalPrice        Decimal                   @db.Decimal(10, 2)
  
  // Fulfillment
  fulfillmentStatus String                    @default("unfulfilled")
  fulfilledQuantity Int                       @default(0)
  
  // Customization
  notes             String?                   @db.Text
  customFields      Json?
  
  // Metadata
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  
  // Relations
  order             WhatsAppOrder             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           WhatsAppProduct           @relation(fields: [productId], references: [id])
  variant           WhatsAppProductVariant?   @relation(fields: [variantId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

enum OrganizationRole {
  OWNER
  ADMIN
  FINANCE
  OPERATIONS
  VIEWER
}

enum OperationalStaffRole {
  OPERATIONS
  ADMIN
}

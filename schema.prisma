generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Location {
  id                        String             @id @default(uuid())
  label                     String
  imageUrl                  String
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  slug                      String?
  tags                      String?            @db.Text
  airlineCancellationPolicy Json?
  cancellationPolicy        Json?
  exclusions                Json?
  importantNotes            Json?
  inclusions                Json?
  kitchenGroupPolicy        Json?
  paymentPolicy             Json?
  termsconditions           Json?
  usefulTip                 Json?
  hotels                    Hotel[]
  activities                Activity[]
  activitiesMaster          ActivityMaster[]
  itineraries               Itinerary[]
  itinerariesMaster         ItineraryMaster[]
  transportPricings         TransportPricing[]
  tourPackages              TourPackage[]      @relation("LocationTotourPackage")
  tourPackageQuery          TourPackageQuery[] @relation("LocationTotourPackageQuery")
  inquiries                 Inquiry[]          @relation("LocationToInquiry")
  suppliers                 SupplierLocation[]

  @@index([id])
}

model Hotel {
  id                String            @id @default(uuid())
  locationId        String
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  link              String?           @db.Text
  images            Images[]
  location          Location          @relation(fields: [locationId], references: [id])
  itineraries       Itinerary[]       @relation("ItineraryToHotel")
  itinerariesMaster ItineraryMaster[] @relation("ItineraryMasterToHotel")
  seasonalPricing   HotelPricing[]

  @@index([locationId])
}

model MealPlan {
  id                  String               @id @default(uuid())
  name                String
  code                String               @unique
  description         String
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  hotelPricings       HotelPricing[]
  roomAllocations     RoomAllocation[]
  itineraries         Itinerary[]
  itinerariesMaster   ItineraryMaster[]
  tourPackagePricings TourPackagePricing[]
}

model RoomType {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  hotelPricings     HotelPricing[]
  roomAllocations   RoomAllocation[]
  itineraries       Itinerary[]
  itinerariesMaster ItineraryMaster[]
}

model OccupancyType {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  maxPersons        Int
  rank              Int               @default(0)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  hotelPricings     HotelPricing[]
  roomAllocations   RoomAllocation[]
  itineraries       Itinerary[]
  itinerariesMaster ItineraryMaster[]
}

model VehicleType {
  id                String             @id @default(uuid())
  name              String             @unique
  description       String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  transportPricings TransportPricing[]
  transportDetails  TransportDetail[]
}

model HotelPricing {
  id              String         @id @default(uuid())
  hotelId         String
  startDate       DateTime
  endDate         DateTime
  price           Float
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  mealPlanId      String?
  occupancyTypeId String?
  roomTypeId      String?
  hotel           Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomType        RoomType?      @relation(fields: [roomTypeId], references: [id])
  occupancyType   OccupancyType? @relation(fields: [occupancyTypeId], references: [id])
  mealPlan        MealPlan?      @relation(fields: [mealPlanId], references: [id])

  @@index([hotelId])
  @@index([roomTypeId])
  @@index([occupancyTypeId])
  @@index([mealPlanId])
  @@index([startDate, endDate])
}

model TransportPricing {
  id            String       @id @default(uuid())
  locationId    String
  startDate     DateTime
  endDate       DateTime
  price         Float
  transportType String
  description   String?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  vehicleTypeId String?
  location      Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  vehicleType   VehicleType? @relation(fields: [vehicleTypeId], references: [id])

  @@index([locationId])
  @@index([vehicleTypeId])
  @@index([startDate, endDate])
}

model TourPackageQuery {
  id                               String            @id @default(uuid())
  tourPackageQueryName             String?
  customerName                     String?
  numDaysNight                     String?
  locationId                       String
  period                           String?
  numAdults                        String?
  numChild5to12                    String?
  numChild0to5                     String?
  price                            String?           @db.Text
  isFeatured                       Boolean           @default(false)
  isArchived                       Boolean           @default(false)
  createdAt                        DateTime          @default(now())
  updatedAt                        DateTime          @updatedAt
  assignedTo                       String?
  assignedToMobileNumber           String?
  assignedToEmail                  String?
  pricePerAdult                    String?
  pricePerChild5to12YearsNoBed     String?
  pricePerChildOrExtraBed          String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                       String?           @db.Text
  transport                        String?
  tourPackageQueryNumber           String?
  customerNumber                   String?
  drop_location                    String?
  pickup_location                  String?
  tourEndsOn                       DateTime?
  tourStartsFrom                   DateTime?
  remarks                          String?           @db.Text
  tour_highlights                  String?           @db.Text
  tourPackageQueryType             String?
  disclaimer                       String?           @db.Text
  inquiryId                        String?
  associatePartnerId               String?
  pricingSection                   Json?
  selectedTemplateId               String?
  selectedTemplateType             String?
  tourPackageTemplateName          String?
  occupancySelections              Json?
  selectedMealPlanId               String?
  airlineCancellationPolicy        Json?
  cancellationPolicy               Json?
  exclusions                       Json?
  importantNotes                   Json?
  inclusions                       Json?
  kitchenGroupPolicy               Json?
  paymentPolicy                    Json?
  termsconditions                  Json?
  usefulTip                        Json?
  location                         Location          @relation("LocationTotourPackageQuery", fields: [locationId], references: [id])
  flightDetails                    FlightDetails[]
  itineraries                      Itinerary[]
  itinerariesMaster                ItineraryMaster[]
  images                           Images[]
  purchaseDetails                  PurchaseDetail[]
  saleDetails                      SaleDetail[]
  paymentDetails                   PaymentDetail[]
  receiptDetails                   ReceiptDetail[]
  expenseDetails                   ExpenseDetail[]
  incomeDetails                    IncomeDetail[]
  flightTickets                    FlightTicket[]
  inquiry                          Inquiry?          @relation(fields: [inquiryId], references: [id])
  associatePartner                 AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)

  @@index([locationId])
  @@index([inquiryId])
  @@index([associatePartnerId])
}

model PurchaseDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  supplierId         String?
  purchaseDate       DateTime
  price              Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  billDate           DateTime?
  billNumber         String?
  dueDate            DateTime?
  gstAmount          Float?
  gstPercentage      Float?
  referenceNumber    String?
  stateOfSupply      String?
  status             String?          @default("pending")
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  items              PurchaseItem[]
  purchaseReturns    PurchaseReturn[]

  @@index([supplierId])
  @@index([tourPackageQueryId])
}

model PurchaseItem {
  id                  String               @id @default(uuid())
  purchaseDetailId    String
  productName         String
  description         String?              @db.Text
  quantity            Float
  unitOfMeasureId     String?
  pricePerUnit        Float
  discountPercent     Float?
  discountAmount      Float?
  taxSlabId           String?
  taxAmount           Float?
  totalAmount         Float
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  purchaseDetail      PurchaseDetail       @relation(fields: [purchaseDetailId], references: [id], onDelete: Cascade)
  unitOfMeasure       UnitOfMeasure?       @relation(fields: [unitOfMeasureId], references: [id], onDelete: SetNull)
  taxSlab             TaxSlab?             @relation(fields: [taxSlabId], references: [id], onDelete: SetNull)
  purchaseReturnItems PurchaseReturnItem[]

  @@index([purchaseDetailId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
}

model PaymentDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  paymentDate        DateTime
  amount             Float
  method             String?
  transactionId      String?
  note               String?          @db.Text
  supplierId         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bankAccountId      String?
  cashAccountId      String?
  images             Images[]
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  supplier           Supplier?        @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  bankAccount        BankAccount?     @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?     @relation(fields: [cashAccountId], references: [id])

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([supplierId])
  @@index([tourPackageQueryId])
}

model SaleDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  customerId         String?
  saleDate           DateTime
  salePrice          Float
  description        String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  dueDate            DateTime?
  gstAmount          Float?
  gstPercentage      Float?
  invoiceDate        DateTime?
  invoiceNumber      String?
  stateOfSupply      String?
  status             String?          @default("pending")
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items              SaleItem[]
  saleReturns        SaleReturn[]

  @@index([customerId])
  @@index([tourPackageQueryId])
}

model SaleItem {
  id              String           @id @default(uuid())
  saleDetailId    String
  productName     String
  description     String?          @db.Text
  quantity        Float
  unitOfMeasureId String?
  pricePerUnit    Float
  discountPercent Float?
  discountAmount  Float?
  taxSlabId       String?
  taxAmount       Float?
  totalAmount     Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  saleDetail      SaleDetail       @relation(fields: [saleDetailId], references: [id], onDelete: Cascade)
  unitOfMeasure   UnitOfMeasure?   @relation(fields: [unitOfMeasureId], references: [id], onDelete: SetNull)
  taxSlab         TaxSlab?         @relation(fields: [taxSlabId], references: [id], onDelete: SetNull)
  saleReturnItems SaleReturnItem[]

  @@index([saleDetailId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
}

model ReceiptDetail {
  id                 String           @id @default(uuid())
  tourPackageQueryId String
  receiptDate        DateTime
  amount             Float
  reference          String?
  note               String?          @db.Text
  customerId         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bankAccountId      String?
  cashAccountId      String?
  images             Images[]
  tourPackageQuery   TourPackageQuery @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  customer           Customer?        @relation(fields: [customerId], references: [id], onDelete: SetNull)
  bankAccount        BankAccount?     @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?     @relation(fields: [cashAccountId], references: [id])

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([customerId])
  @@index([tourPackageQueryId])
}

model ExpenseDetail {
  id                 String            @id @default(uuid())
  tourPackageQueryId String?
  expenseDate        DateTime
  amount             Float
  description        String?           @db.Text
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  bankAccountId      String?
  cashAccountId      String?
  expenseCategoryId  String?
  isAccrued          Boolean           @default(false)
  accruedDate        DateTime?
  paidDate           DateTime?
  expenseCategory    ExpenseCategory?  @relation(fields: [expenseCategoryId], references: [id])
  images             Images[]
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  bankAccount        BankAccount?      @relation(fields: [bankAccountId], references: [id])
  cashAccount        CashAccount?      @relation(fields: [cashAccountId], references: [id])

  @@index([bankAccountId])
  @@index([cashAccountId])
  @@index([expenseCategoryId])
  @@index([tourPackageQueryId])
  @@index([isAccrued])
}

model FlightDetails {
  id                 String            @id @default(uuid())
  date               String?
  flightName         String?
  flightNumber       String?
  from               String?
  to                 String?
  departureTime      String?
  arrivalTime        String?
  flightDuration     String?
  tourPackageQueryId String?
  tourPackageId      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  images             Images[]
  tourPackage        TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)

  @@index([tourPackageQueryId])
  @@index([tourPackageId])
}

model TourPackage {
  id                               String               @id @default(uuid())
  locationId                       String
  price                            String?
  isFeatured                       Boolean              @default(false)
  isArchived                       Boolean              @default(false)
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  assignedTo                       String?
  assignedToEmail                  String?
  assignedToMobileNumber           String?
  customerName                     String?
  numAdults                        String?
  numChild0to5                     String?
  numChild5to12                    String?
  numDaysNight                     String?
  period                           String?
  tourPackageName                  String?
  pricePerAdult                    String?
  pricePerChild5to12YearsNoBed     String?
  pricePerChildOrExtraBed          String?
  pricePerChildwithSeatBelow5Years String?
  totalPrice                       String?              @db.Text
  transport                        String?
  customerNumber                   String?
  drop_location                    String?
  pickup_location                  String?
  tour_highlights                  String?              @db.Text
  slug                             String?
  tourPackageType                  String?
  pricingSection                   Json?
  airlineCancellationPolicy        Json?
  cancellationPolicy               Json?
  exclusions                       Json?
  importantNotes                   Json?
  inclusions                       Json?
  kitchenGroupPolicy               Json?
  paymentPolicy                    Json?
  termsconditions                  Json?
  usefulTip                        Json?
  location                         Location             @relation("LocationTotourPackage", fields: [locationId], references: [id])
  flightDetails                    FlightDetails[]
  itineraries                      Itinerary[]
  itinerariesMaster                ItineraryMaster[]
  images                           Images[]
  tourPackagePricings              TourPackagePricing[]

  @@index([locationId])
}

model PricingAttribute {
  id                String             @id @default(uuid())
  name              String             @unique
  sortOrder         Int                @default(0)
  isActive          Boolean            @default(true)
  isDefault         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  pricingComponents PricingComponent[]

  @@index([name])
  @@index([isDefault])
}

model PricingComponent {
  id                   String              @id @default(uuid())
  price                Decimal             @db.Decimal(10, 2)
  tourPackagePricingId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  pricingAttributeId   String
  pricingAttribute     PricingAttribute    @relation(fields: [pricingAttributeId], references: [id])
  tourPackagePricing   TourPackagePricing? @relation(fields: [tourPackagePricingId], references: [id], onDelete: Cascade)

  @@index([pricingAttributeId])
  @@index([tourPackagePricingId])
}

model TourPackagePricing {
  id                String             @id @default(uuid())
  tourPackageId     String
  startDate         DateTime
  endDate           DateTime
  numberOfRooms     Int                @default(1)
  isActive          Boolean            @default(true)
  description       String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  mealPlanId        String
  tourPackage       TourPackage        @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  mealPlan          MealPlan           @relation(fields: [mealPlanId], references: [id])
  pricingComponents PricingComponent[]

  @@index([tourPackageId])
  @@index([mealPlanId])
  @@index([startDate, endDate])
  @@index([numberOfRooms])
}

model Activity {
  id                  String           @id @default(uuid())
  locationId          String
  activityTitle       String?          @db.Text
  activityDescription String?          @db.Text
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  itineraryId         String?
  itineraryMasterId   String?
  location            Location         @relation(fields: [locationId], references: [id])
  activityImages      Images[]
  itinerary           Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryMaster     ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
  @@index([itineraryMasterId])
}

model ActivityMaster {
  id                        String     @id @default(uuid())
  locationId                String
  activityMasterTitle       String?    @db.Text
  activityMasterDescription String?    @db.Text
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  itineraryId               String?
  location                  Location   @relation(fields: [locationId], references: [id])
  activityMasterImages      Images[]
  itinerary                 Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([locationId])
  @@index([itineraryId])
}

model Itinerary {
  id                   String            @id @default(uuid())
  locationId           String
  tourPackageId        String?
  tourPackageQueryId   String?
  itineraryTitle       String?           @db.Text
  itineraryDescription String?           @db.Text
  days                 String?
  hotelId              String?
  mealsIncluded        String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  dayNumber            Int?
  roomCategory         String?
  numberofRooms        String?
  mealPlanId           String?
  occupancyTypeId      String?
  roomTypeId           String?
  location             Location          @relation(fields: [locationId], references: [id])
  itineraryImages      Images[]
  hotel                Hotel?            @relation("ItineraryToHotel", fields: [hotelId], references: [id])
  roomType             RoomType?         @relation(fields: [roomTypeId], references: [id])
  mealPlan             MealPlan?         @relation(fields: [mealPlanId], references: [id])
  occupancyType        OccupancyType?    @relation(fields: [occupancyTypeId], references: [id])
  transportDetails     TransportDetail[]
  roomAllocations      RoomAllocation[]
  tourPackage          TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery     TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities           Activity[]
  activitiesMaster     ActivityMaster[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([roomTypeId])
  @@index([mealPlanId])
  @@index([occupancyTypeId])
}

model ItineraryMaster {
  id                         String            @id @default(uuid())
  locationId                 String
  tourPackageId              String?
  tourPackageQueryId         String?
  itineraryMasterTitle       String?           @db.Text
  itineraryMasterDescription String?           @db.Text
  days                       String?
  hotelId                    String?
  mealsIncluded              String?
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  dayNumber                  Int?
  roomCategory               String?
  numberofRooms              String?
  mealPlanId                 String?
  occupancyTypeId            String?
  roomTypeId                 String?
  location                   Location          @relation(fields: [locationId], references: [id])
  itineraryMasterImages      Images[]
  hotel                      Hotel?            @relation("ItineraryMasterToHotel", fields: [hotelId], references: [id])
  roomType                   RoomType?         @relation(fields: [roomTypeId], references: [id])
  mealPlan                   MealPlan?         @relation(fields: [mealPlanId], references: [id])
  occupancyType              OccupancyType?    @relation(fields: [occupancyTypeId], references: [id])
  transportDetails           TransportDetail[]
  roomAllocations            RoomAllocation[]
  tourPackage                TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery           TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  activities                 Activity[]

  @@index([locationId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([roomTypeId])
  @@index([mealPlanId])
  @@index([occupancyTypeId])
}

model Images {
  id                  String            @id @default(uuid())
  tourPackageId       String?
  tourPackageQueryId  String?
  url                 String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  hotelId             String?
  itinerariesId       String?
  activitiesId        String?
  activitiesMasterId  String?
  itinerariesMasterId String?
  paymentDetailsId    String?
  receiptDetailsId    String?
  expenseDetailsId    String?
  incomeDetailsId     String?
  flightDetailsId     String?
  tourPackage         TourPackage?      @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageQuery    TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  hotel               Hotel?            @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  itineraries         Itinerary?        @relation(fields: [itinerariesId], references: [id], onDelete: Cascade)
  itinerariesMaster   ItineraryMaster?  @relation(fields: [itinerariesMasterId], references: [id], onDelete: Cascade)
  activities          Activity?         @relation(fields: [activitiesId], references: [id], onDelete: Cascade)
  activitiesMaster    ActivityMaster?   @relation(fields: [activitiesMasterId], references: [id], onDelete: Cascade)
  paymentDetails      PaymentDetail?    @relation(fields: [paymentDetailsId], references: [id], onDelete: Cascade)
  receiptDetails      ReceiptDetail?    @relation(fields: [receiptDetailsId], references: [id], onDelete: Cascade)
  incomeDetails       IncomeDetail?     @relation(fields: [incomeDetailsId], references: [id], onDelete: Cascade)
  expenseDetails      ExpenseDetail?    @relation(fields: [expenseDetailsId], references: [id], onDelete: Cascade)
  flightDetails       FlightDetails?    @relation(fields: [flightDetailsId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([itinerariesId])
  @@index([itinerariesMasterId])
  @@index([activitiesId])
  @@index([activitiesMasterId])
  @@index([tourPackageId])
  @@index([tourPackageQueryId])
  @@index([paymentDetailsId])
  @@index([receiptDetailsId])
  @@index([incomeDetailsId])
  @@index([expenseDetailsId])
  @@index([flightDetailsId])
}

model Customer {
  id                    String            @id @default(uuid())
  name                  String
  contact               String?
  email                 String?
  birthdate             DateTime?         @db.Date
  marriageAnniversary   DateTime?         @db.Date
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  associatePartnerId    String?
  saleDetails           SaleDetail[]
  receiptDetails        ReceiptDetail[]
  associatePartner      AssociatePartner? @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)

  @@index([associatePartnerId])
}

model Supplier {
  id              String             @id @default(uuid())
  name            String
  contact         String?
  email           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  locations       SupplierLocation[]
  purchaseDetails PurchaseDetail[]
  paymentDetails  PaymentDetail[]
}

model SupplierLocation {
  id         String   @id @default(uuid())
  supplierId String
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([supplierId, locationId])
  @@index([supplierId])
  @@index([locationId])
}

model AssociatePartner {
  id                 String             @id @default(uuid())
  name               String
  mobileNumber       String
  email              String?
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  gmail              String?
  inquiries          Inquiry[]
  customers          Customer[]
  tourPackageQueries TourPackageQuery[]
}

model OperationalStaff {
  id                String               @id @default(uuid())
  name              String
  email             String               @unique
  password          String
  role              OperationalStaffRole @default(OPERATIONS)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  assignedInquiries Inquiry[]            @relation("AssignedOperationalStaffToInquiry")

  @@index([email])
}

model Inquiry {
  id                   String             @id @default(uuid())
  customerName         String
  customerMobileNumber String
  associatePartnerId   String?
  locationId           String
  numAdults            Int                @default(0)
  numChildrenAbove11   Int                @default(0)
  numChildren5to11     Int                @default(0)
  numChildrenBelow5    Int                @default(0)
  remarks              String?            @db.Text
  status               String             @default("pending")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  journeyDate          DateTime?          @db.Date
  assignedStaffAt      DateTime?
  assignedToStaffId    String?
  location             Location           @relation("LocationToInquiry", fields: [locationId], references: [id])
  associatePartner     AssociatePartner?  @relation(fields: [associatePartnerId], references: [id], onDelete: SetNull)
  actions              InquiryAction[]
  tourPackageQueries   TourPackageQuery[]
  assignedStaff        OperationalStaff?  @relation("AssignedOperationalStaffToInquiry", fields: [assignedToStaffId], references: [id])
  roomAllocations      RoomAllocation[]
  transportDetails     TransportDetail[]

  @@index([locationId])
  @@index([associatePartnerId])
  @@index([assignedToStaffId])
}

model InquiryAction {
  id         String   @id @default(uuid())
  inquiryId  String
  actionType String
  remarks    String
  actionDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  inquiry    Inquiry  @relation(fields: [inquiryId], references: [id])

  @@index([inquiryId])
}

model BankAccount {
  id                String          @id @default(uuid())
  accountName       String
  bankName          String
  accountNumber     String          @unique
  ifscCode          String
  branch            String
  openingBalance    Float           @default(0)
  currentBalance    Float           @default(0)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentDetails    PaymentDetail[]
  receiptDetails    ReceiptDetail[]
  expenseDetails    ExpenseDetail[]
  incomeDetails     IncomeDetail[]
  outgoingTransfers Transfer[]      @relation("FromBankAccount")
  incomingTransfers Transfer[]      @relation("ToBankAccount")

  @@index([accountNumber])
}

model CashAccount {
  id                String          @id @default(uuid())
  accountName       String          @unique
  openingBalance    Float           @default(0)
  currentBalance    Float           @default(0)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentDetails    PaymentDetail[]
  receiptDetails    ReceiptDetail[]
  expenseDetails    ExpenseDetail[]
  incomeDetails     IncomeDetail[]
  outgoingTransfers Transfer[]      @relation("FromCashAccount")
  incomingTransfers Transfer[]      @relation("ToCashAccount")
}

model IncomeDetail {
  id                 String            @id @default(uuid())
  incomeDate         DateTime
  amount             Float
  description        String?
  tourPackageQueryId String?
  bankAccountId      String?
  cashAccountId      String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now())
  incomeCategoryId   String?
  incomeCategory     IncomeCategory?   @relation(fields: [incomeCategoryId], references: [id])
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: Cascade)
  bankAccount        BankAccount?      @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  cashAccount        CashAccount?      @relation(fields: [cashAccountId], references: [id], onDelete: Cascade)
  images             Images[]

  @@index([incomeCategoryId])
  @@index([tourPackageQueryId])
  @@index([bankAccountId])
  @@index([cashAccountId])
}

model IncomeCategory {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  incomes     IncomeDetail[]
}

model ExpenseCategory {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  expenses    ExpenseDetail[]
}

model Transfer {
  id                String       @id @default(uuid())
  amount            Float
  transferDate      DateTime
  reference         String?
  description       String?
  fromBankAccountId String?
  fromCashAccountId String?
  toBankAccountId   String?
  toCashAccountId   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  fromBankAccount   BankAccount? @relation("FromBankAccount", fields: [fromBankAccountId], references: [id])
  fromCashAccount   CashAccount? @relation("FromCashAccount", fields: [fromCashAccountId], references: [id])
  toBankAccount     BankAccount? @relation("ToBankAccount", fields: [toBankAccountId], references: [id])
  toCashAccount     CashAccount? @relation("ToCashAccount", fields: [toCashAccountId], references: [id])

  @@index([fromBankAccountId])
  @@index([fromCashAccountId])
  @@index([toBankAccountId])
  @@index([toCashAccountId])
}

model Organization {
  id                String   @id @default(uuid())
  name              String
  address           String?  @db.Text
  city              String?
  state             String?
  pincode           String?
  country           String?
  phone             String?
  email             String?
  website           String?
  gstNumber         String?
  panNumber         String?
  logoUrl           String?
  defaultCurrency   String?  @default("₹")
  defaultTaxSlab    String?
  invoicePrefix     String?  @default("INV-")
  nextInvoiceNumber Int      @default(1)
  billPrefix        String?  @default("BILL-")
  nextBillNumber    Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UnitOfMeasure {
  id                  String               @id @default(uuid())
  name                String               @unique
  abbreviation        String
  description         String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]
  purchaseReturnItems PurchaseReturnItem[]
  saleReturnItems     SaleReturnItem[]
}

model TaxSlab {
  id                  String               @id @default(uuid())
  name                String               @unique
  percentage          Float
  description         String?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]
  purchaseReturnItems PurchaseReturnItem[]
  saleReturnItems     SaleReturnItem[]
}

model PurchaseReturn {
  id               String               @id @default(uuid())
  purchaseDetailId String
  returnDate       DateTime
  returnReason     String?              @db.Text
  amount           Float
  gstAmount        Float?
  reference        String?
  status           String               @default("pending")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  purchaseDetail   PurchaseDetail       @relation(fields: [purchaseDetailId], references: [id])
  items            PurchaseReturnItem[]

  @@index([purchaseDetailId])
}

model PurchaseReturnItem {
  id               String         @id @default(uuid())
  purchaseReturnId String
  purchaseItemId   String?
  productName      String
  description      String?        @db.Text
  quantity         Float
  unitOfMeasureId  String?
  pricePerUnit     Float
  taxAmount        Float?
  taxSlabId        String?
  totalAmount      Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  purchaseReturn   PurchaseReturn @relation(fields: [purchaseReturnId], references: [id], onDelete: Cascade)
  purchaseItem     PurchaseItem?  @relation(fields: [purchaseItemId], references: [id])
  unitOfMeasure    UnitOfMeasure? @relation(fields: [unitOfMeasureId], references: [id])
  taxSlab          TaxSlab?       @relation(fields: [taxSlabId], references: [id])

  @@index([purchaseReturnId])
  @@index([purchaseItemId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
}

model SaleReturn {
  id           String           @id @default(uuid())
  saleDetailId String
  returnDate   DateTime
  returnReason String?          @db.Text
  amount       Float
  gstAmount    Float?
  reference    String?
  status       String           @default("pending")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  saleDetail   SaleDetail       @relation(fields: [saleDetailId], references: [id])
  items        SaleReturnItem[]

  @@index([saleDetailId])
}

model SaleReturnItem {
  id              String         @id @default(uuid())
  saleReturnId    String
  saleItemId      String?
  productName     String
  description     String?        @db.Text
  quantity        Float
  unitOfMeasureId String?
  pricePerUnit    Float
  taxAmount       Float?
  taxSlabId       String?
  totalAmount     Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  saleReturn      SaleReturn     @relation(fields: [saleReturnId], references: [id], onDelete: Cascade)
  saleItem        SaleItem?      @relation(fields: [saleItemId], references: [id])
  unitOfMeasure   UnitOfMeasure? @relation(fields: [unitOfMeasureId], references: [id])
  taxSlab         TaxSlab?       @relation(fields: [taxSlabId], references: [id])

  @@index([saleReturnId])
  @@index([saleItemId])
  @@index([unitOfMeasureId])
  @@index([taxSlabId])
}

model FlightTicket {
  id                 String            @id @default(uuid())
  pnr                String            @unique
  airline            String
  flightNumber       String
  departureAirport   String
  arrivalAirport     String
  departureTime      DateTime
  arrivalTime        DateTime
  ticketClass        String
  issueDate          DateTime          @default(now())
  status             String            @default("confirmed")
  baggageAllowance   String?
  bookingReference   String?
  fareAmount         Float?
  taxAmount          Float?
  totalAmount        Float?
  tourPackageQueryId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  tourPackageQuery   TourPackageQuery? @relation(fields: [tourPackageQueryId], references: [id], onDelete: SetNull)
  passengers         Passenger[]

  @@index([tourPackageQueryId])
}

model Passenger {
  id             String       @id @default(uuid())
  name           String
  type           String       @default("Adult")
  seatNumber     String?
  age            Int?
  gender         String?
  flightTicketId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  flightTicket   FlightTicket @relation(fields: [flightTicketId], references: [id], onDelete: Cascade)

  @@index([flightTicketId])
}

model TransportDetail {
  id                      String           @id @default(uuid())
  itineraryId             String?
  quantity                Int              @default(1)
  capacity                Int?
  description             String?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @default(now())
  dropLocation            String?
  inquiryId               String?
  isAirportDropRequired   Boolean?         @default(false)
  isAirportPickupRequired Boolean?         @default(false)
  itineraryMasterId       String?
  notes                   String?          @db.Text
  pickupLocation          String?
  requirementDate         DateTime?
  vehicleTypeId           String
  itinerary               Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  inquiry                 Inquiry?         @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  itineraryMaster         ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)
  vehicleType             VehicleType      @relation(fields: [vehicleTypeId], references: [id])

  @@index([itineraryId])
  @@index([inquiryId])
  @@index([itineraryMasterId])
  @@index([vehicleTypeId])
}

model RoomAllocation {
  id                String           @id @default(uuid())
  itineraryId       String?
  quantity          Int              @default(1)
  guestNames        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  inquiryId         String?
  itineraryMasterId String?
  mealPlanId        String?
  notes             String?          @db.Text
  occupancyTypeId   String
  roomTypeId        String
  itinerary         Itinerary?       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  inquiry           Inquiry?         @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  itineraryMaster   ItineraryMaster? @relation(fields: [itineraryMasterId], references: [id], onDelete: Cascade)
  roomType          RoomType         @relation(fields: [roomTypeId], references: [id])
  occupancyType     OccupancyType    @relation(fields: [occupancyTypeId], references: [id])
  mealPlan          MealPlan?        @relation(fields: [mealPlanId], references: [id])

  @@index([itineraryId])
  @@index([inquiryId])
  @@index([roomTypeId])
  @@index([occupancyTypeId])
  @@index([mealPlanId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(uuid())
  entityId   String
  entityType String
  action     String
  userId     String
  userEmail  String
  userName   String
  userRole   String
  before     Json?
  after      Json?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([entityId])
  @@index([entityType])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model AiGeneratedImage {
  id                String   @id @default(cuid())
  prompt            String   @db.Text
  enhancedPrompt    String?  @db.Text
  referenceImageUrl String?  @db.Text
  generatedImageUrl String   @db.Text
  isApproved        Boolean  @default(false)
  
  // Enhanced metadata fields
  platform          String?
  purpose           String?
  targetAudience    String?
  style             String?
  colorScheme       String?
  
  // User and campaign tracking
  userId            String?
  campaignId        String?
  
  // Rich metadata as JSON
  metadata          Json?
  suggestedCaptions Json?
  hashtags          Json?
  bestPostingTimes  Json?
  engagementTips    Json?
  brandGuidelines   Json?
  
  // Performance tracking
  views             Int      @default(0)
  likes             Int      @default(0)
  shares            Int      @default(0)
  comments          Int      @default(0)
  impressions       Int      @default(0)
  clickThroughRate  Float    @default(0)
  engagementRate    Float    @default(0)
  
  // A/B testing support
  version           String   @default("A")
  isTestVariant     Boolean  @default(false)
  
  // Social media post IDs
  xPostId           String?
  instagramPostId   String?
  linkedInPostId    String?
  pinterestPinId    String?
  facebookPostId    String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  socialMediaPosts  SocialMediaPost[]

  @@index([createdAt])
  @@index([userId])
  @@index([campaignId])
  @@index([platform])
  @@index([isApproved])
}

model SocialMediaConnection {
  id                String              @id @default(uuid())
  userId            String              // Connect to your user system
  platform          SocialMediaPlatform
  platformUserId    String              // User ID on the platform
  platformUsername  String?             // Username/handle on the platform
  accessToken       String              @db.Text // Encrypted access token
  refreshToken      String?             @db.Text // Encrypted refresh token (if applicable)
  tokenExpiresAt    DateTime?           // When the token expires
  isActive          Boolean             @default(true)
  lastSyncAt        DateTime?           // Last time we synced data
  platformData      Json?               // Additional platform-specific data
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  socialMediaPosts  SocialMediaPost[]

  @@unique([userId, platform])
  @@index([userId])
  @@index([platform])
  @@index([isActive])
}

model SocialMediaPost {
  id                    String                @id @default(uuid())
  aiGeneratedImageId    String
  socialMediaConnectionId String
  platform              SocialMediaPlatform
  platformPostId        String               // Post ID on the platform
  caption               String?              @db.Text
  hashtags              Json?                // Array of hashtags used
  postUrl               String?              // URL to the post on the platform
  status                SocialMediaPostStatus @default(DRAFT)
  scheduledAt           DateTime?            // When the post is scheduled
  publishedAt           DateTime?            // When the post was actually published
  
  // Performance metrics
  views                 Int                  @default(0)
  likes                 Int                  @default(0)
  shares                Int                  @default(0)
  comments              Int                  @default(0)
  clicks                Int                  @default(0)
  impressions           Int                  @default(0)
  engagementRate        Float                @default(0)
  
  // Metadata
  postData              Json?                // Additional post-specific data from platform
  lastSyncAt            DateTime?            // Last time metrics were synced
  
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now())
  
  // Relationships
  aiGeneratedImage      AiGeneratedImage     @relation(fields: [aiGeneratedImageId], references: [id], onDelete: Cascade)
  socialMediaConnection SocialMediaConnection @relation(fields: [socialMediaConnectionId], references: [id], onDelete: Cascade)

  @@unique([platform, platformPostId])
  @@index([aiGeneratedImageId])
  @@index([socialMediaConnectionId])
  @@index([platform])
  @@index([status])
  @@index([publishedAt])
}

enum SocialMediaPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  PINTEREST
  WHATSAPP_BUSINESS
}

enum SocialMediaPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  DELETED
}

enum OperationalStaffRole {
  OPERATIONS
  ADMIN
}

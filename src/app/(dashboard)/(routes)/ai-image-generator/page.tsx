"use client"; // Required for form handling and state

import React, { useState } from 'react';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import Image from 'next/image';
import type { AiGeneratedImage } from '@prisma/client';

import { Heading } from '@/components/ui/heading';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import AiImageForm from './components/ai-image-form';
import SocialShareDialog from './components/social-share-dialog';

const AiImageGeneratorPage = () => {
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastPrompt, setLastPrompt] = useState<string>('');
  const [lastReferenceUrl, setLastReferenceUrl] = useState<string | undefined>(undefined);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [approvedImageId, setApprovedImageId] = useState<string | null>(null);

  const handleImageGenerated = (url: string, prompt: string, referenceUrl?: string) => {
    setGeneratedImageUrl(url);
    setLastPrompt(prompt);
    setLastReferenceUrl(referenceUrl);
    setIsLoading(false); // Stop loading indicator shown by the form
  };

  const handleGenerationStart = () => {
    setIsLoading(true);
    setGeneratedImageUrl(null); // Clear previous image
  };

  const handleGenerationError = () => {
    setIsLoading(false);
  };

  const handleApprove = async () => {
    if (!generatedImageUrl || !lastPrompt) return;

    setIsLoading(true);
    try {
      const response = await axios.post('/api/ai-image/approve', {
        generatedImageUrl,
        prompt: lastPrompt,
        referenceImageUrl: lastReferenceUrl,
      });
      
      const approvedImage: AiGeneratedImage = response.data;
      setApprovedImageId(approvedImage.id);
      toast.success('Image approved and saved!');
      
      // Don't clear the image yet - allow user to share
    } catch (error) {
      toast.error('Failed to approve image.');
      console.error("Approval error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReject = () => {
    setGeneratedImageUrl(null);
    setLastPrompt('');
    setLastReferenceUrl(undefined);
    setApprovedImageId(null);
  };

  const handleShareSuccess = () => {
    // Close the dialog and clean up
    setShowShareDialog(false);
    
    // Clean up after successful sharing
    setGeneratedImageUrl(null);
    setLastPrompt('');
    setLastReferenceUrl(undefined);
    setApprovedImageId(null);
  };

  const handleShareCancel = () => {
    setShowShareDialog(false);
  };

  return (
    <div className="flex-col">
      <div className="flex-1 space-y-4 p-8 pt-6">
        <Heading title="AI Image Generator" description="Create images using AI and share them." />
        <Separator />

        <AiImageForm
          onImageGenerated={handleImageGenerated}
          onGenerationStart={handleGenerationStart}
          onGenerationError={handleGenerationError}
          isLoading={isLoading}
        />

        {generatedImageUrl && (
          <div className="mt-6 p-4 border rounded-lg flex flex-col items-center">
            <h3 className="text-lg font-semibold mb-2">Generated Image</h3>
            <div className="relative w-64 h-64 md:w-96 md:h-96 mb-4">
              <Image
                src={generatedImageUrl}
                alt="Generated by AI"
                layout="fill"
                objectFit="contain"
              />
            </div>
            
            {!approvedImageId ? (
              <div className="flex space-x-4">
                <Button
                  type="button"
                  onClick={handleApprove}
                  disabled={isLoading}
                >
                  {isLoading ? 'Approving...' : 'Approve & Save'}
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleReject}
                  disabled={isLoading}
                >
                  Reject
                </Button>
              </div>
            ) : (
              <div className="flex flex-col items-center space-y-3">
                <p className="text-green-600 dark:text-green-400 text-sm">Image Approved âœ“</p>
                <div className="flex space-x-4">
                  <Button
                    type="button"
                    onClick={() => setShowShareDialog(true)}
                  >
                    Share to Social Media
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleReject}
                  >
                    Generate New Image
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Social Share Dialog */}
        <SocialShareDialog
          aiGeneratedImageId={approvedImageId || ''}
          defaultText={lastPrompt}
          onSuccess={handleShareSuccess}
          onCancel={handleShareCancel}
          isOpen={showShareDialog && !!approvedImageId}
        />

        {/* TODO: Optional - Add gallery/list of previously approved images here */}
      </div>
    </div>
  );
};

export default AiImageGeneratorPage;

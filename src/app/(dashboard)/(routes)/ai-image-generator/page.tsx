"use client"; // Required for form handling and state

import React, { useState } from 'react';
import axios from 'axios';
import { toast } from 'react-hot-toast';
import Image from 'next/image';
import type { AiGeneratedImage } from '@prisma/client';

import { Heading } from '@/components/ui/heading';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import AiImageForm from './components/ai-image-form';
import SocialShareDialog from './components/social-share-dialog';

const AiImageGeneratorPage = () => {
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastPrompt, setLastPrompt] = useState<string>('');
  const [enhancedData, setEnhancedData] = useState<any>(null);
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [approvedImageId, setApprovedImageId] = useState<string | null>(null);
  const [showEnhancedPreview, setShowEnhancedPreview] = useState(false);

  const handleImageGenerated = (url: string, prompt: string, enhancedDataParam?: any) => {
    setGeneratedImageUrl(url);
    setLastPrompt(prompt);
    setEnhancedData(enhancedDataParam);
    setIsLoading(false);
  };

  const handleGenerationStart = () => {
    setIsLoading(true);
    setGeneratedImageUrl(null); // Clear previous image
  };

  const handleGenerationError = () => {
    setIsLoading(false);
  };
  const handleApprove = async () => {
    if (!generatedImageUrl || !lastPrompt) return;

    setIsLoading(true);
    try {
      const response = await axios.post('/api/ai-image/approve-enhanced', {
        generatedImageUrl,
        prompt: lastPrompt,
        referenceImageUrl: enhancedData?.referenceImageUrl,
        enhancedPrompt: enhancedData?.enhancedPrompt,
        platform: enhancedData?.platform,
        purpose: enhancedData?.purpose,
        targetAudience: enhancedData?.targetAudience,
        style: enhancedData?.style,
        colorScheme: enhancedData?.colorScheme,
        metadata: enhancedData?.metadata,
        suggestedCaptions: enhancedData?.suggestedCaptions,
        hashtags: enhancedData?.hashtags,
        bestPostingTimes: enhancedData?.bestPostingTimes,
        engagementTips: enhancedData?.engagementTips,
      });
      
      const approvedImage: AiGeneratedImage = response.data;
      setApprovedImageId(approvedImage.id);
      toast.success('Enhanced image approved and saved!');
      
    } catch (error) {
      toast.error('Failed to approve image.');
      console.error("Approval error:", error);
    } finally {
      setIsLoading(false);
    }
  };
  const handleReject = () => {
    setGeneratedImageUrl(null);
    setLastPrompt('');
    setEnhancedData(null);
    setApprovedImageId(null);
    setShowEnhancedPreview(false);
  };

  const handleShareSuccess = () => {
    setShowShareDialog(false);
    setGeneratedImageUrl(null);
    setLastPrompt('');
    setEnhancedData(null);
    setApprovedImageId(null);
    setShowEnhancedPreview(false);
  };

  const handleShareCancel = () => {
    setShowShareDialog(false);
  };

  return (
    <div className="flex-col">
      <div className="flex-1 space-y-4 p-8 pt-6">
        <Heading title="AI Image Generator" description="Create images using AI and share them." />
        <Separator />

        <AiImageForm
          onImageGenerated={handleImageGenerated}
          onGenerationStart={handleGenerationStart}
          onGenerationError={handleGenerationError}
          isLoading={isLoading}
        />        {generatedImageUrl && (
          <div className="mt-6 space-y-6">
            <div className="p-6 border rounded-lg">
              <h3 className="text-xl font-semibold mb-4">Generated Image</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="flex flex-col items-center">
                  <div className="relative w-full max-w-lg aspect-square mb-4">
                    <Image
                      src={generatedImageUrl}
                      alt="Generated by AI"
                      layout="fill"
                      objectFit="contain"
                      className="rounded-lg"
                    />
                  </div>
                  
                  {!approvedImageId ? (
                    <div className="flex space-x-4">
                      <Button
                        type="button"
                        onClick={handleApprove}
                        disabled={isLoading}
                        size="lg"
                      >
                        {isLoading ? 'Approving...' : 'Approve & Save'}
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={handleReject}
                        disabled={isLoading}
                        size="lg"
                      >
                        Reject
                      </Button>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center space-y-3">
                      <p className="text-green-600 dark:text-green-400 text-sm font-medium">✓ Image Approved</p>
                      <div className="flex space-x-4">
                        <Button
                          type="button"
                          onClick={() => setShowShareDialog(true)}
                          size="lg"
                        >
                          Share to Social Media
                        </Button>
                        <Button
                          type="button"
                          variant="outline"
                          onClick={handleReject}
                          size="lg"
                        >
                          Generate New Image
                        </Button>
                      </div>
                    </div>
                  )}
                </div>

                {enhancedData && (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h4 className="text-lg font-medium">Enhanced Details</h4>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowEnhancedPreview(!showEnhancedPreview)}
                      >
                        {showEnhancedPreview ? 'Hide' : 'Show'} Details
                      </Button>
                    </div>

                    {showEnhancedPreview && (
                      <div className="space-y-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                        {enhancedData.suggestedCaptions && (
                          <div>
                            <h5 className="font-medium mb-2">Suggested Captions</h5>
                            <div className="space-y-2">
                              {enhancedData.suggestedCaptions.map((caption: string, index: number) => (
                                <p key={index} className="text-sm p-2 bg-white dark:bg-gray-700 rounded border">
                                  {caption}
                                </p>
                              ))}
                            </div>
                          </div>
                        )}

                        {enhancedData.hashtags && (
                          <div>
                            <h5 className="font-medium mb-2">Recommended Hashtags</h5>
                            <div className="flex flex-wrap gap-1">
                              {enhancedData.hashtags.map((tag: string, index: number) => (
                                <span key={index} className="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded">
                                  {tag}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}

                        {enhancedData.bestPostingTimes && (
                          <div>
                            <h5 className="font-medium mb-2">Best Posting Times</h5>
                            <div className="grid grid-cols-2 gap-2 text-sm">
                              {Object.entries(enhancedData.bestPostingTimes).map(([day, times]: [string, any]) => (
                                <div key={day} className="p-2 bg-white dark:bg-gray-700 rounded">
                                  <strong>{day}:</strong> {Array.isArray(times) ? times.join(', ') : times}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        {enhancedData.engagementTips && (
                          <div>
                            <h5 className="font-medium mb-2">Engagement Tips</h5>
                            <ul className="space-y-1 text-sm">
                              {enhancedData.engagementTips.map((tip: string, index: number) => (
                                <li key={index} className="flex items-start">
                                  <span className="text-green-500 mr-2">•</span>
                                  {tip}
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {enhancedData.enhancedPrompt && (
                          <div>
                            <h5 className="font-medium mb-2">Enhanced Prompt</h5>
                            <p className="text-sm p-3 bg-white dark:bg-gray-700 rounded border">
                              {enhancedData.enhancedPrompt}
                            </p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}        {/* Social Share Dialog */}
        <SocialShareDialog
          aiGeneratedImageId={approvedImageId || ''}
          defaultText={lastPrompt}
          enhancedData={enhancedData}
          onSuccess={handleShareSuccess}
          onCancel={handleShareCancel}
          isOpen={showShareDialog && !!approvedImageId}
        />

        {/* TODO: Optional - Add gallery/list of previously approved images here */}
      </div>
    </div>
  );
};

export default AiImageGeneratorPage;
